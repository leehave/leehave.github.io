<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Director</title>
  <subtitle>It&#39;s going down,I&#39;m yelling timber,You better move,you better dance</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leehave.github.io/"/>
  <updated>2016-08-02T09:24:17.000Z</updated>
  <id>https://leehave.github.io/</id>
  
  <author>
    <name>Director</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6中文手册</title>
    <link href="https://leehave.github.io/2016/08/02/es6%E6%89%8B%E5%86%8C/"/>
    <id>https://leehave.github.io/2016/08/02/es6手册/</id>
    <published>2016-08-02T09:24:17.000Z</published>
    <updated>2016-08-02T09:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个 ES2015(ES6) 的Cheatsheet，其中包括提示、小技巧、最佳实践和一些代码片段，帮助你<br>完成日复一日的开发工作。</p>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#var-versus-let--const">var 与 let / const 声明</a></li>
<li><a href="#replacing-iifes-with-blocks">代码执行块替换立即执行函数</a></li>
<li><a href="#arrow-functions">箭头函数</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#destructuring">解构</a></li>
<li><a href="#modules">模块</a></li>
<li><a href="#parameters">参数</a></li>
<li><a href="#classes">类</a></li>
<li><a href="#symbols">Symbols</a></li>
<li><a href="#maps">Maps</a></li>
<li><a href="#weakmaps">WeakMaps</a></li>
<li><a href="#promises">Promises</a></li>
<li><a href="#generators">Generators</a></li>
<li><a href="#async-await">Async Await</a><a id="more"></a>
<h2 id="var-versus-let-const"><a href="#var-versus-let-const" class="headerlink" title="var versus let / const"></a>var versus let / const</h2></li>
</ul>
<blockquote>
<p>除了 <code>var</code> 以外，我们现在多了两个新的标识符来声明变量的存储，它们就是 <code>let</code> 和 <code>const</code>。<br>不同于 <code>var</code> ，<code>let</code> 和 <code>const</code> 语句不会造成声明提升。</p>
</blockquote>
<p>一个 <code>var</code> 的例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> snack = <span class="string">'Meow Mix'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (food) &#123;</div><div class="line">        <span class="keyword">var</span> snack = <span class="string">'Friskies'</span>;</div><div class="line">        <span class="keyword">return</span> snack;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> snack;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getFood(<span class="literal">false</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>让我们再观察下面语句中，使用 <code>let</code> 替换了 <code>var</code> 后的表现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> snack = <span class="string">'Meow Mix'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (food) &#123;</div><div class="line">        <span class="keyword">let</span> snack = <span class="string">'Friskies'</span>;</div><div class="line">        <span class="keyword">return</span> snack;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> snack;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getFood(<span class="literal">false</span>); <span class="comment">// 'Meow Mix'</span></div></pre></td></tr></table></figure>
<p>当我们重构使用 <code>var</code> 的老代码时，一定要注意这种变化。盲目使用 <code>let</code> 替换 <code>var</code> 后可能会导致预期意外的结果。</p>
<blockquote>
<p><strong>注意</strong>：<code>let</code> 和 <code>const</code> 是块级作用域语句。所以在语句块以外引用这些变量时，会造成引用错误 <code>ReferenceError</code>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line"></div><div class="line"><span class="keyword">let</span> x = <span class="string">'hi'</span>; <span class="comment">// ReferenceError: x is not defined</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>: 在重构老代码时，<code>var</code> 声明需要格外的注意。在创建一个新项目时，使用 <code>let</code> 声明一个变量，使用 <code>const</code> 来声明一个不可改变的常量。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Replacing-IIFEs-with-Blocks"><a href="#Replacing-IIFEs-with-Blocks" class="headerlink" title="Replacing IIFEs with Blocks"></a>Replacing IIFEs with Blocks</h2><p>我们以往创建一个 <strong>立即执行函数</strong> 时，一般是在函数最外层包裹一层括号。<br>ES6支持块级作用域（更贴近其他语言），我们现在可以通过创建一个代码块（Block）来实现，不必通过创建一个函数来实现，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> food = <span class="string">'Meow Mix'</span>;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(food); <span class="comment">// Reference Error</span></div></pre></td></tr></table></figure>
<p>使用支持块级作用域的ES6的版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> food = <span class="string">'Meow Mix'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(food); <span class="comment">// Reference Error</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h2><p>一些时候，我们在函数嵌套中需要访问上下文中的 <code>this</code>。比如下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character; <span class="comment">// Cannot read property 'name' of undefined</span></div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一种通用的方式是把上下文中的 <code>this</code> 保存在一个变量里：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// Store the context of this</span></div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> that.name + character;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们也可以把 <code>this</code> 通过属性传进去：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character;</div><div class="line">    &#125;, <span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>还可以直接使用 <code>bind</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用 <strong>箭头函数</strong>，<code>this</code> 的值不用我们再做如上几段代码的特殊处理，直接使用即可。<br>上面的代码可以重写为下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(character =&gt; <span class="keyword">this</span>.name + character);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：使用箭头函数，再也不用考虑 <code>this</code> 的问题了。</p>
</blockquote>
<p>当我们编写只返回一个表达式值的简单函数时，也可以使用箭头函数，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> squares = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x &#125;); <span class="comment">// Function Expression</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> squares = arr.map(x =&gt; x * x); <span class="comment">// Arrow Function for terser implementation</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：尽可能地多使用 <strong>箭头函数</strong>。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>在ES6中，标准库也被同样增强了，像字符串对象就新增了 <code>.includes()</code> 和 <code>.repeat()</code> 方法。</p>
<h3 id="includes"><a href="#includes" class="headerlink" title=".includes( )"></a>.includes( )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'food'</span>;</div><div class="line"><span class="keyword">var</span> substring = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(string.indexOf(substring) &gt; <span class="number">-1</span>);</div></pre></td></tr></table></figure>
<p>现在，我们可以使用 <code>.inclues()</code> 方法，替代以往判断内容 <code>&gt; -1</code> 的方式。<br><code>.includes()</code> 方法会极简地返回一个布尔值结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> string = <span class="string">'food'</span>;</div><div class="line"><span class="keyword">const</span> substring = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(string.includes(substring)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="repeat"><a href="#repeat" class="headerlink" title=".repeat( )"></a>.repeat( )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">string, count</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> strings = [];</div><div class="line">    <span class="keyword">while</span>(strings.length &lt; count) &#123;</div><div class="line">        strings.push(string);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strings.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ES6中，我们可以使用一个极简的方法来实现重复字符：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String.repeat(numberOfRepetitions)</span></div><div class="line"><span class="string">'meow'</span>.repeat(<span class="number">3</span>); <span class="comment">// 'meowmeowmeow'</span></div></pre></td></tr></table></figure>
<h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>使用 <strong>字符串模板字面量</strong>，我可以在字符串中直接使用特殊字符，而不用转义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"This string contains \"double quotes\" which are escaped."</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="string">`This string contains "double quotes" which don't need to be escaped anymore.`</span>;</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 还支持直接插入变量，可以实现字符串与变量的直接连接输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Tiger'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">13</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'My cat is named '</span> + name + <span class="string">' and is '</span> + age + <span class="string">' years old.'</span>);</div></pre></td></tr></table></figure>
<p>更简单的版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="string">'Tiger'</span>;</div><div class="line"><span class="keyword">const</span> age = <span class="number">13</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`My cat is named <span class="subst">$&#123;name&#125;</span> and is <span class="subst">$&#123;age&#125;</span> years old.`</span>);</div></pre></td></tr></table></figure>
<p>ES5中，我们要这样生成多行文本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = (</div><div class="line">    <span class="string">'cat\n'</span> +</div><div class="line">    <span class="string">'dog\n'</span> +</div><div class="line">    <span class="string">'nickelodeon'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = [</div><div class="line">    <span class="string">'cat'</span>,</div><div class="line">    <span class="string">'dog'</span>,</div><div class="line">    <span class="string">'nickelodeon'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 让我们不必特别关注多行字符串中的换行转义符号，直接换行即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = ( <span class="string">`cat</span></div><div class="line">dog</div><div class="line">nickelodeon`</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 内部可以使用表达式，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">let</span> text = <span class="string">`The time and date is <span class="subst">$&#123;today.toLocaleString()&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h2><p>解构让我们可以使用非常便捷的语法，直接将数组或者对象中的值直接分别导出到多个变量中，</p>
<h3 id="Destructuring-Arrays"><a href="#Destructuring-Arrays" class="headerlink" title="Destructuring Arrays"></a>Destructuring Arrays</h3><p><strong>解构数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> a = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> b = arr[<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> c = arr[<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> d = arr[<span class="number">3</span>];</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="Destructuring-Objects"><a href="#Destructuring-Objects" class="headerlink" title="Destructuring Objects"></a>Destructuring Objects</h3><p><strong>解构对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123; occupation: <span class="string">'jedi'</span>, father: <span class="string">'anakin'</span> &#125;;</div><div class="line"><span class="keyword">var</span> occupation = luke.occupation; <span class="comment">// 'jedi'</span></div><div class="line"><span class="keyword">var</span> father = luke.father; <span class="comment">// 'anakin'</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> luke = &#123; occupation: <span class="string">'jedi'</span>, father: <span class="string">'anakin'</span> &#125;;</div><div class="line"><span class="keyword">let</span> &#123;occupation, father&#125; = luke;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(occupation); <span class="comment">// 'jedi'</span></div><div class="line"><span class="built_in">console</span>.log(father); <span class="comment">// 'anakin'</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>ES6之前，浏览器端的模块化代码，我们使用像<a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>这样的库，<br>在 <strong>Node.js</strong> 中，我们则使用 <a href="https://nodejs.org/api/modules.html#modules_module_require_id" target="_blank" rel="external">require</a>。<br>在ES6中，我们现在可以直接使用AMD 和 CommonJS这些模块了。</p>
<h3 id="Exporting-in-CommonJS"><a href="#Exporting-in-CommonJS" class="headerlink" title="Exporting in CommonJS"></a>Exporting in CommonJS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>;</div><div class="line"><span class="built_in">module</span>.exports = &#123; foo: <span class="string">'bar'</span> &#125;;</div><div class="line"><span class="built_in">module</span>.exports = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h3 id="Exporting-in-ES6"><a href="#Exporting-in-ES6" class="headerlink" title="Exporting in ES6"></a>Exporting in ES6</h3><p>在ES6中，提供了多种设置模块出口的方式，比如我们要导出一个变量，那么使用 <strong>变量名</strong> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'David'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> age  = <span class="number">25</span>;​​</div></pre></td></tr></table></figure>
<p>还可以为对象 <strong>导出一个列表</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; sumTwo, sumThree &#125;;</div></pre></td></tr></table></figure>
<p>我们也可以使用简单的一个 <code>export</code> 关键字来导出一个结果值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们可以 <strong>导出一个默认出口</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> api = &#123;</div><div class="line">    sumTwo,</div><div class="line">    sumThree</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：总是在模块的 <strong>最后</strong> 使用 <code>export default</code> 方法。<br>它让模块的出口更清晰明了，节省了阅读整个模块来寻找出口的时间。<br>更多的是，在大量CommonJS模块中，通用的习惯是设置一个出口值或者出口对象。<br>最受这个规则，可以让我们的代码更易读，且更方便的联合使用CommonJS和ES6模块。</p>
</blockquote>
<h3 id="Importing-in-ES6"><a href="#Importing-in-ES6" class="headerlink" title="Importing in ES6"></a>Importing in ES6</h3><p>ES6提供了好几种模块的导入方式。我们可以单独引入一个文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'underscore'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里需要注意的是， <strong>整个文件的引入方式会执行该文件内的最上层代码</strong>。</p>
</blockquote>
<p>就像Python一样，我们还可以命名引用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; sumTwo, sumThree &#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>我们甚至可以使用 <code>as</code> 给这些模块重命名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    sumTwo <span class="keyword">as</span> addTwoNumbers,</div><div class="line">    sumThree <span class="keyword">as</span> sumThreeNumbers</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>另外，我们能 <strong>引入所有的东西（原文：import all the things）</strong> （也称为命名空间引入）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>最后，我们能可以从一个模块的众多值中引入一个列表：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> additionUtil <span class="keyword">from</span> <span class="string">'math/addtion'</span>;</div><div class="line"><span class="keyword">const</span> &#123; sumTwo, sumThree &#125; = additionUtil;</div></pre></td></tr></table></figure>
<p>像这样引用默认对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div><div class="line"><span class="comment">// Same as: import &#123; default as api &#125; from 'math/addition';</span></div></pre></td></tr></table></figure>
<p>我们建议一个模块导出的值应该越简洁越好，不过有时候有必要的话命名引用和默认引用可以混着用。如果一个模块是这样导出的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foos.js</span></div><div class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span>, foo1, foo2 &#125;;</div></pre></td></tr></table></figure>
<p>那我们可以如此导入这个模块的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo, &#123; foo1, foo2 &#125; from &apos;foos&apos;;</div></pre></td></tr></table></figure>
<p>我们还可以导入commonjs模块，例如React：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">const</span> &#123; Component, PropTypes &#125; = React;</div></pre></td></tr></table></figure>
<p>更简化版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：被导出的值是被 <strong>绑定的（原文：bingdings）</strong>，而不是引用。<br>所以，改变一个模块中的值的话，会影响其他引用本模块的代码，一定要避免此种改动发生。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>在ES5中，许多种方法来处理函数的 <strong>参数默认值（default values）</strong>，<strong>参数数量（indefinite arguments）</strong>，<strong>参数命名（named parameters）</strong>。<br>ES6中，我们可以使用非常简洁的语法来处理上面提到的集中情况。</p>
<h3 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    x = x || <span class="number">0</span>;</div><div class="line">    y = y || <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6中，我们可以简单为函数参数启用默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">x=0, y=0</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">addTwoNumbers(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 6</span></div><div class="line">addTwoNumbers(<span class="number">2</span>); <span class="comment">// 2</span></div><div class="line">addTwoNumbers(); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<h3 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h3><p>ES5中，遇到参数数量不确定时，我们只能如此处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <strong>rest</strong> 操作符，我们可以给函数传入一个不确定数量的参数列表：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) &#123;</div><div class="line">        <span class="built_in">console</span>.log(arg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Named-Parameters"><a href="#Named-Parameters" class="headerlink" title="Named Parameters"></a>Named Parameters</h3><p>命名函数<br>ES5中，当我们要处理多个 <strong>命名参数</strong> 时，通常会传入一个 <strong>选项对象</strong> 的方式，这种方式被jQuery采用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = options.height || <span class="number">600</span>;</div><div class="line">    <span class="keyword">var</span> width  = options.width  || <span class="number">400</span>;</div><div class="line">    <span class="keyword">var</span> lineStroke = options.lineStroke || <span class="string">'black'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以利用上面提到的新特性 <strong>解构</strong> ，来完成与上面同样功能的函数：<br>We can achieve the same functionality using destructuring as a formal parameter<br>to a function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params"></span></span></div><div class="line">    &#123; height=600, width=400, lineStroke='black'&#125;) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Use variables height, width, lineStroke here</span></div></pre></td></tr></table></figure>
<p>如果我们需要把这个参数变为可选的，那么只要把该参数解构为一个空对象就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params"></span></span></div><div class="line">    &#123; height=600, width=400, lineStroke='black'&#125; = &#123;&#125;) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p>我们可以利用展开操作符（Spread Operator）来把一组数组的值，当作参数传入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(...[<span class="number">-1</span>, <span class="number">100</span>, <span class="number">9001</span>, <span class="number">-32</span>]); <span class="comment">// 9001</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>在ES6以前，我们实现一个类的功能的话，需要首先创建一个构造函数，然后扩展这个函数的原型方法，就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name   = name;</div><div class="line">    <span class="keyword">this</span>.age    = age;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.incrementAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age += <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>继承父类的子类需要这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Personal</span>(<span class="params">name, age, gender, occupation, hobby</span>) </span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>, name, age, gender);</div><div class="line">    <span class="keyword">this</span>.occupation = occupation;</div><div class="line">    <span class="keyword">this</span>.hobby = hobby;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Personal.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line">Personal.prototype.constructor = Personal;</div><div class="line">Personal.prototype.incrementAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Person.prototype.incrementAge.call(<span class="keyword">this</span>) += <span class="number">20</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ES6提供了一些语法糖来实现上面的功能，我们可以直接创建一个类：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age, gender) &#123;</div><div class="line">        <span class="keyword">this</span>.name   = name;</div><div class="line">        <span class="keyword">this</span>.age    = age;</div><div class="line">        <span class="keyword">this</span>.gender = gender;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">      <span class="keyword">this</span>.age += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承父类的子类只要简单的使用 <code>extends</code> 关键字就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Personal</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age, gender, occupation, hobby) &#123;</div><div class="line">        <span class="keyword">super</span>(name, age, gender);</div><div class="line">        <span class="keyword">this</span>.occupation = occupation;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">        <span class="keyword">super</span>.incrementAge();</div><div class="line">        <span class="keyword">this</span>.age += <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：ES6新的类语法把我们从晦涩难懂的实现和原型操作中解救出来，这是个非常适合初学者的功能，而且能让我们写出更干净整洁的代码。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><p>符号（Symbols）在ES6版本之前就已经存在了，但现在我们拥有一个公共的接口来直接使用它们。<br>Symbols对象是一旦创建就不可以被更改的（immutable）而且能被用做hash数据类型中的键。</p>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol( )"></a>Symbol( )</h3><p>调用 <code>Symbol()</code> 或者 <code>Symbol(描述文本)</code> 会创建一个唯一的、在全局中不可以访问的符号对象。<br>一个 <code>Symbol()</code> 的应用场景是：在自己的项目中使用第三方代码库，且你需要给他们的对象或者命名空间打补丁代码，又不想改动或升级第三方原有代码的时候。<br>举个例子，如果你想给 <code>React.Component</code> 这个类添加一个 <code>refreshComponent</code> 方法，但又确定不了这个方法会不会在下个版本中加入，你可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> refreshComponent = <span class="built_in">Symbol</span>();</div><div class="line"></div><div class="line">React.Component.prototype[refreshComponent] = () =&gt; &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Symbol-for-key"><a href="#Symbol-for-key" class="headerlink" title="Symbol.for(key)"></a>Symbol.for(key)</h3><p>使用 <code>Symbol.for(key)</code> 也是会创建一个不可改变的Symbol对象，但区别于上面的创建方法，这个对象是在全局中可以被访问到的。<br>调用两次 <code>Symbol.for(key)</code> 会返回相同的Symbol实例。</p>
<p><strong>提示</strong>：这并不同于 <code>Symbol(description)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>一个Symbols常用的使用场景，是需要使用特别 <code>Symbol.for(key)</code> 方法来实现代码间的协作。<br>这能让你在你的代码中，查找包含已知的接口的第三方代码中Symbol成员。（译者：这句话好难翻。。。原文：This can be<br>achieved by having your code look for a Symbol member on object arguments from third parties that contain some known interface. ）举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reader</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> specialRead = <span class="built_in">Symbol</span>.for(<span class="string">'specialRead'</span>);</div><div class="line">    <span class="keyword">if</span> (obj[specialRead]) &#123;</div><div class="line">        <span class="keyword">const</span> reader = obj[specialRead]();</div><div class="line">        <span class="comment">// do something with reader</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'object cannot be read'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在另一个库中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> specialRead = <span class="built_in">Symbol</span>.for(<span class="string">'specialRead'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeReadableType</span> </span>&#123;</div><div class="line">    [specialRead]() &#123;</div><div class="line">        <span class="keyword">const</span> reader = createSomeReaderFrom(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> reader;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：<code>Symbol.iterable</code> 在ES6中像其他可枚举的对象，如数组，字符串，generators一样，当这个方法被调用时会激活一个枚举器并返回一个对象。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p><strong>Maps</strong> 是一个Javascript中很重要（迫切需要）的数据结构。<br>在ES6之前，我们创建一个 <strong>hash</strong> 通常是使用一个对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">map[key1] = <span class="string">'value1'</span>;</div><div class="line">map[key2] = <span class="string">'value2'</span>;</div></pre></td></tr></table></figure>
<p>但是，这样的代码无法避免函数被特别的属性名覆盖的意外情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; getOwnProperty(&#123; hasOwnProperty: <span class="string">'Hah, overwritten'</span>&#125;, <span class="string">'Pwned'</span>);</div><div class="line">&gt; <span class="built_in">TypeError</span>: Property <span class="string">'hasOwnProperty'</span> is not a <span class="function"><span class="keyword">function</span></span></div></pre></td></tr></table></figure>
<p><strong>Maps</strong> 让我们使用 <code>set</code>，<code>get</code> 和 <code>search</code> 操作数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">&gt; map.set(<span class="string">'name'</span>, <span class="string">'david'</span>);</div><div class="line">&gt; map.get(<span class="string">'name'</span>); <span class="comment">// david</span></div><div class="line">&gt; map.has(<span class="string">'name'</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>Maps最强大的地方在于我们不必只能使用字符串来做key了，现在可以使用任何类型来当作key，而且key不会被强制类型转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'name'</span>, <span class="string">'david'</span>],</div><div class="line">    [<span class="literal">true</span>, <span class="string">'false'</span>],</div><div class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],</div><div class="line">    [&#123;&#125;, <span class="string">'object'</span>],</div><div class="line">    [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="string">'function'</span>]</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> key);</div><div class="line">    <span class="comment">// &gt; string, boolean, number, object, function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：当使用 <code>map.get()</code> 判断值是否相等时，非基础类型比如一个函数或者对象，将不会正常工作。<br>有鉴于此，还是建议使用字符串，布尔和数字类型的数据类型。</p>
</blockquote>
<p>我们还可以使用 <code>.entries()</code> 方法来遍历整个map对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="WeakMaps"><a href="#WeakMaps" class="headerlink" title="WeakMaps"></a>WeakMaps</h2><p>在ES5之前的版本，我们为了存储私有数据，有好几种方法。像使用这种下划线命名约定：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(age) &#123;</div><div class="line">        <span class="keyword">this</span>._age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _incrementAge() &#123;</div><div class="line">        <span class="keyword">this</span>._age += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个开源项目中，命名规则很难维持得一直很好，这样经常会造成一些困扰。<br>此时，我们可以选择使用WeakMaps来替代Maps来存储我们的数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> _age = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(age) &#123;</div><div class="line">        _age.set(<span class="keyword">this</span>, age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">        <span class="keyword">let</span> age = _age.get(<span class="keyword">this</span>) + <span class="number">1</span>;</div><div class="line">        _age.set(<span class="keyword">this</span>, age);</div><div class="line">        <span class="keyword">if</span> (age &gt; <span class="number">50</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Midlife crisis'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用WeakMaps来保存我们私有数据的理由之一是不会暴露出属性名，就像下面的例子中的 <code>Reflect.ownKeys()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="number">50</span>);</div><div class="line">&gt; person.incrementAge(); <span class="comment">// 'Midlife crisis'</span></div><div class="line">&gt; <span class="built_in">Reflect</span>.ownKeys(person); <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>一个使用WeakMaps存储数据更实际的例子，就是有关于一个DOM元素和对该DOM元素（有污染）地操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="keyword">let</span> el  = <span class="built_in">document</span>.getElementById(<span class="string">'someElement'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Store a weak reference to the element with a key</span></div><div class="line">map.set(el, <span class="string">'reference'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Access the value of the element</span></div><div class="line"><span class="keyword">let</span> value = map.get(el); <span class="comment">// 'reference'</span></div><div class="line"></div><div class="line"><span class="comment">// Remove the reference</span></div><div class="line">el.parentNode.removeChild(el);</div><div class="line">el = <span class="literal">null</span>;</div><div class="line"></div><div class="line">value = map.get(el); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>上面的例子中，一个对象被垃圾回收期给销毁了，WeakMaps会自动的把自己内部所对应的键值对数据同时销毁。</p>
<blockquote>
<p><strong>提示</strong>：结合这个例子，再考虑下jQuery是如何实现缓存带有引用的DOM元素这个功能的，使用了WeakMaps的话，当被缓存的DOM元素被移除的时，jQuery可以自动释放相应元素的内存。<br>通常情况下，在涉及DOM元素存储和缓存的情况下，使用WeakMaps是非常适合的。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>Promises让我们让我们多缩进难看的代码（回调地狱）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">func1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</div><div class="line">    func2(value1, <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</div><div class="line">        func3(value2, <span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</div><div class="line">            func4(value3, <span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</div><div class="line">                func5(value4, <span class="function"><span class="keyword">function</span> (<span class="params">value5</span>) </span>&#123;</div><div class="line">                    <span class="comment">// Do something with value 5</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>写成这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func1(value1)</div><div class="line">    .then(func2)</div><div class="line">    .then(func3)</div><div class="line">    .then(func4)</div><div class="line">    .then(func5, value5 =&gt; &#123;</div><div class="line">        <span class="comment">// Do something with value 5</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>在ES6之前，我们使用<a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a> 或者<br><a href="https://github.com/kriskowal/q" target="_blank" rel="external">Q</a>。现在我们有了原生版本的 Promises：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt;</div><div class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to fulfill Promise'</span>)))</div><div class="line">        .catch(reason =&gt; <span class="built_in">console</span>.log(reason));</div></pre></td></tr></table></figure>
<p>这里有两个处理函数，<strong>resolve</strong>（当Promise执行成功完毕时调用的回调函数） 和 <strong>reject</strong> （当Promise执行不接受时调用的回调函数）</p>
<blockquote>
<p><strong>Promises的好处</strong>：大量嵌套错误回调函数会使代码变得难以阅读理解。<br>使用了Promises，我们可以让我们代码变得更易读，组织起来更合理。<br>此外，Promise处理后的值，无论是解决还是拒绝的结果值，都是不可改变的。</p>
</blockquote>
<p>下面是一些使用Promises的实际例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fetchJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">        $.getJSON(url)</div><div class="line">            .done((json) =&gt; resolve(json))</div><div class="line">            .fail((xhr, status, err) =&gt; reject(status + err.message));</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们还可以使用 <code>Promise.all()</code> 来异步的 <strong>并行</strong> 处理一个数组的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> urls = [</div><div class="line">    <span class="string">'http://www.api.com/items/1234'</span>,</div><div class="line">    <span class="string">'http://www.api.com/items/4567'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> urlPromises = urls.map(fetchJSON);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all(urlPromises)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">        results.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed: '</span>, err);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>就像<a href="https://github.com/DrkSephy/es6-cheatsheet#promises" target="_blank" rel="external">Promises</a>如何让我们避免<a href="http://callbackhell.com/" target="_blank" rel="external">回调地狱</a>一样，Generators也可以使我们的代码扁平化，同时给予我们开发者像开发同步代码一样的感觉来写异步代码。Generators本质上是一种支持的函数，随后返回表达式的值。<br>Generators实际上是支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield" target="_blank" rel="external">暂停运行</a>，随后根据上一步的返回值再继续运行的一种函数。</p>
<p>下面代码是一个使用generators函数的简单例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sillyGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> generator = sillyGenerator();</div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 4, done: false &#125;</span></div></pre></td></tr></table></figure>
<p>就像上面的例子，当<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next" target="_blank" rel="external">next</a>运行时，它会把我们的generator向前“推动”，同时执行新的表达式。<br>我们能利用Generators来像书写同步代码一样书写异步代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Hiding asynchronousity with Generators</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    getJSON(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        generator.next(response);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们写个generator函数将要返回我们的数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</div><div class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</div><div class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</div><div class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>借助于 <code>yield</code>，我们可以保证 <code>entry1</code> 确实拿到数据并转换后再赋值给 <code>data1</code>。</p>
<p>当我们使用generators来像书写同步代码一样书写我们的异步代码逻辑时，没有一种清晰简单的方式来处理期间可能会产生的错误或者异常。在这种情况下，我们可以在我们的generator中引入Promises来处理，就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">        getJSON(url, resolve);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再写一个函数，其中使用 <code>next</code> 来步进我们的generator的同事，再利用我们上面的 <code>request</code> 方法来产生（yield）一个Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterateGenerator</span>(<span class="params">gen</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> generator = gen();</div><div class="line">    <span class="keyword">var</span> ret;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        ret = generator.next();</div><div class="line">        <span class="keyword">if</span>(!ret.done) &#123;</div><div class="line">            ret.value.then(iterate);</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Generator中引入了Promises后，我们就可以通过Promise的 <code>.catch</code> 和 <code>reject</code> 来捕捉和处理错误了。<br>使用了我们新版的Generator后，新版的调用就像老版本一样简单可读（译者注：有微调）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iterateGenerator(<span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</div><div class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</div><div class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</div><div class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在使用Generator后，我们可以重用我们的老版本代码实现，以此展示了Generator的力量。<br>当使用Generators和Promises后，我们可以像书写同步代码一样书写异步代码的同时优雅地解决了错误处理问题。<br>此后，我们实际上可以开始利用更简单的一种方式了，它就是<a href="https://github.com/DrkSephy/es6-cheatsheet#async-await" target="_blank" rel="external">async-await</a>。</p>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async Await"></a>Async Await</h2><p><code>async await</code> 随着ES2016版本就要发布了，它给我们提供了一种更轻松的、更简单的可以替代的实现上面 Generators 配合 Promises 组合代码的一种编码方式，让我们来看看例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    request(url, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">      resolve(body);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> getJSON();</div><div class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// NOT undefined!</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">main();</div></pre></td></tr></table></figure>
<p>它们看上去和Generators很像。我（作者）强烈推荐使用 <code>async await</code> 来替代Generators + Promises的写法。<br><a href="http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html" target="_blank" rel="external">这里</a>是个很好的学习资源，让我们学习和使用这项ES7中的新功能。</p>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个 ES2015(ES6) 的Cheatsheet，其中包括提示、小技巧、最佳实践和一些代码片段，帮助你&lt;br&gt;完成日复一日的开发工作。&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#var-versus-let--const&quot;&gt;var 与 let / const 声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#replacing-iifes-with-blocks&quot;&gt;代码执行块替换立即执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arrow-functions&quot;&gt;箭头函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#strings&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#destructuring&quot;&gt;解构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modules&quot;&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#parameters&quot;&gt;参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#classes&quot;&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#symbols&quot;&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maps&quot;&gt;Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#weakmaps&quot;&gt;WeakMaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#generators&quot;&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#async-await&quot;&gt;Async Await&lt;/a&gt;
    
    </summary>
    
    
      <category term="ECMAscript" scheme="https://leehave.github.io/tags/ECMAscript/"/>
    
  </entry>
  
  <entry>
    <title>导演很无语</title>
    <link href="https://leehave.github.io/2016/08/01/something/"/>
    <id>https://leehave.github.io/2016/08/01/something/</id>
    <published>2016-07-31T16:03:29.000Z</published>
    <updated>2016-07-31T16:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好"><a href="#有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好" class="headerlink" title="有点蛋疼的是,换了工作后,博客源文件忘了拷走,现在重新搭建了一遍,好在是用 ‘nodejs’ 强力驱动,hexo的博客驱动还是很给力的,我这种懒人,弄了个WordPress到现在还没设计好怎么搞好,"></a>有点蛋疼的是,换了工作后,博客源文件忘了拷走,现在重新搭建了一遍,好在是用 ‘nodejs’ 强力驱动,hexo的博客驱动还是很给力的,我这种懒人,弄了个WordPress到现在还没设计好怎么搞好,</h2><p>最近发生了好多事,措手不及也是意料之中。————————————————————————分割线</p>
<blockquote>
<p>最近在学各种js框架和夯实基础(走的时候茶杯水漏了把犀牛书弄湿了,心塞–),在这分享点资源<br>awesome前端库(<a href="https://www.awesomes.cn/" target="_blank" rel="external">https://www.awesomes.cn/</a>) 醉牛前端(<a href="http://f2er.club/" target="_blank" rel="external">http://f2er.club/</a>) talkingcoder(<a href="http://www.talkingcoder.com/" target="_blank" rel="external">http://www.talkingcoder.com/</a>)</p>
</blockquote>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><ul>
<li><p><strong>构建 Facebook F8 2016 App / React Native 开发指南</strong><br><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">http://f8-app.liaohuqiu.net/</a></p>
</li>
<li><p><strong>React-Native入门指南</strong><br><a href="https://github.com/vczero/react-native-lesson" target="_blank" rel="external">https://github.com/vczero/react-native-lesson</a></p>
</li>
<li><p><strong>30天学习React Native教程</strong><br><a href="https://github.com/fangwei716/30-days-of-react-native" target="_blank" rel="external">https://github.com/fangwei716/30-days-of-react-native</a></p>
</li>
<li><p><strong>React-Native视频教程(部分免费)</strong><br><a href="https://egghead.io/technologies/react" target="_blank" rel="external">https://egghead.io/technologies/react</a></p>
</li>
</ul>
<h3 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h3><ul>
<li><p><strong>angular2</strong><br><a href="https://angular.cn/" target="_blank" rel="external">https://angular.cn/</a></p>
</li>
<li><p><strong>使用typescript撰写的angularjs风格app</strong><br><a href="https://github.com/NoctisHsu/91APP-TypeScript-Angularjs" target="_blank" rel="external">https://github.com/NoctisHsu/91APP-TypeScript-Angularjs</a></p>
</li>
</ul>
<h3 id="Vuejs"><a href="#Vuejs" class="headerlink" title="Vuejs"></a>Vuejs</h3><ul>
<li><p><strong>基于vue.js重写Cnodejs.org社区的webapp</strong><br><a href="https://github.com/shinygang/Vue-cnodejs" target="_blank" rel="external">https://github.com/shinygang/Vue-cnodejs</a></p>
</li>
<li><p>**基于 Vue.js 的移动端组件库Mint Ui<br><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="external">http://mint-ui.github.io/#!/zh-cn</a></p>
</li>
</ul>
<h3 id="这个不得不说一个-国产的vuer们称作kpi项目的-阿里巴巴的weex"><a href="#这个不得不说一个-国产的vuer们称作kpi项目的-阿里巴巴的weex" class="headerlink" title="这个不得不说一个 国产的vuer们称作kpi项目的 阿里巴巴的weex"></a>这个不得不说一个 国产的vuer们称作kpi项目的 阿里巴巴的weex</h3><p><a href="http://alibaba.github.io/weex/doc/tutorial.html" target="_blank" rel="external">http://alibaba.github.io/weex/doc/tutorial.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好&quot;&gt;&lt;a href=&quot;#有点蛋疼的是-换了工作后-博客源文件忘了拷走
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack 中文指南</title>
    <link href="https://leehave.github.io/2016/07/31/webpack/"/>
    <id>https://leehave.github.io/2016/07/31/webpack/</id>
    <published>2016-07-31T15:32:37.000Z</published>
    <updated>2016-07-31T15:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitter.im/zhaoda/webpack-handbook?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="external"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/zhaoda/webpack-handbook"></a></p>
<p><a href="https://github.com/webpack/webpack" target="_blank" rel="external">Webpack</a> 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p>
<p><a href="http://zhaoda.net/webpack-handbook" target="_blank" rel="external">主站</a> · <a href="https://www.gitbook.com/book/zhaoda/webpack/details" target="_blank" rel="external">下载电子版</a> · <a href="http://webpackdoc.com" target="_blank" rel="external">国内镜像1</a>（掘金）· <a href="http://wiki.jikexueyuan.com/project/webpack-handbook" target="_blank" rel="external">国内镜像2</a>（极客学院）</p>
<a id="more"></a>
<h2 id="贡献内容"><a href="#贡献内容" class="headerlink" title="贡献内容"></a>贡献内容</h2><p>如果你想参与这本书的共同创作，修改或添加内容，可以先 <a href="https://github.com/zhaoda/webpack-handbook" target="_blank" rel="external">Fork</a> 这本书的仓库，然后将修改的内容提交 <a href="https://github.com/zhaoda/webpack-handbook/pulls" target="_blank" rel="external">Pull requests</a> ；或者创建 <a href="https://github.com/zhaoda/webpack-handbook/issues" target="_blank" rel="external">Issues</a>。</p>
<p>Fork 后的仓库如何同步本仓库？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 添加 upstream 源，只需执行一次</div><div class="line">$ git remote add upstream git@github.com:zhaoda/webpack-handbook.git</div><div class="line"></div><div class="line">// 拉取远程代码</div><div class="line">$ git pull upstream master</div><div class="line"></div><div class="line">// 提交修改</div><div class="line">$ git add .</div><div class="line">$ git commit</div><div class="line"></div><div class="line">// 更新 fork 仓库</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>更多参考： <a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">Syncing a fork</a></p>
<p>注意，本书内容在 <code>/content</code> 目录中， <a href="https://github.com/zhaoda/webpack-handbook/tree/gh-pages" target="_blank" rel="external">gh-pages</a> 分支和 <a href="https://github.com/zhaoda/webpack-handbook/wiki" target="_blank" rel="external">Wiki</a> 版是通过脚本自动生成的。</p>
<h2 id="生成电子书"><a href="#生成电子书" class="headerlink" title="生成电子书"></a>生成电子书</h2><p>这本书使用 <a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">Gitbook</a> 撰写并生成<a href="http://zhaoda.net/webpack-handbook/" target="_blank" rel="external">网站</a>，请查看 <code>package.json</code> 中的 <code>scripts</code> 配置和 <code>/scripts</code> 目录中的脚本来了解这本书的构建和发布过程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 初始化 nodejs 依赖</div><div class="line">$ npm install</div><div class="line"></div><div class="line">// 安装 gitbook 插件</div><div class="line">$ npm install gitbook-cli -g</div><div class="line">$ gitbook install ./content</div><div class="line"></div><div class="line">// 启动 gitbook 服务开始撰写工作</div><div class="line">$ npm run serve-gitbook</div><div class="line"></div><div class="line">// 生成 gitbook</div><div class="line">$ npm run generate-gitbook</div><div class="line"></div><div class="line">// 生成 wiki</div><div class="line">$ npm run generate-wiki</div><div class="line"></div><div class="line">// 发布到 gh-pages 分支</div><div class="line">$ npm run deploy-gitbook</div><div class="line"></div><div class="line">// 发布到 wiki</div><div class="line">$ npm run deploy-wiki</div><div class="line"></div><div class="line">// 生成并发布，是上面4条命令的快捷方式，通常编辑内容后只需要进行这个操作</div><div class="line">$ npm run generate-and-deploy</div></pre></td></tr></table></figure>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p><a href="https://github.com/zhaoda/webpack-handbook/commits/master" target="_blank" rel="external">https://github.com/zhaoda/webpack-handbook/commits/master</a></p>
<h2 id="版权许可"><a href="#版权许可" class="headerlink" title="版权许可"></a>版权许可</h2><p><br>  <span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">Webpack 中文指南</span> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="http://zhaoda.net/webpack-handbook" property="cc:attributionName" rel="external" target="_blank">赵达</a> 创作，采用 <a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享 署名-非商业性使用 4.0 国际 许可协议</a>进行许可。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gitter.im/zhaoda/webpack-handbook?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Join the chat at https://gitter.im/zhaoda/webpack-handbook&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;Webpack&lt;/a&gt; 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 &lt;code&gt;loader&lt;/code&gt; 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zhaoda.net/webpack-handbook&quot;&gt;主站&lt;/a&gt; · &lt;a href=&quot;https://www.gitbook.com/book/zhaoda/webpack/details&quot;&gt;下载电子版&lt;/a&gt; · &lt;a href=&quot;http://webpackdoc.com&quot;&gt;国内镜像1&lt;/a&gt;（掘金）· &lt;a href=&quot;http://wiki.jikexueyuan.com/project/webpack-handbook&quot;&gt;国内镜像2&lt;/a&gt;（极客学院）&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://leehave.github.io/tags/webpack/"/>
    
      <category term="前端打包工具" scheme="https://leehave.github.io/tags/%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="模块化" scheme="https://leehave.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://leehave.github.io/2016/07/31/hello-world/"/>
    <id>https://leehave.github.io/2016/07/31/hello-world/</id>
    <published>2016-07-31T15:15:43.000Z</published>
    <updated>2016-07-31T15:15:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
