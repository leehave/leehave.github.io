<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Director</title>
  <subtitle>只为装逼而写,WEB前端笔记集合</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leehave.github.io/"/>
  <updated>2016-11-04T05:15:19.000Z</updated>
  <id>https://leehave.github.io/</id>
  
  <author>
    <name>Director</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用js函数</title>
    <link href="https://leehave.github.io/2016/11/04/%E5%B8%B8%E7%94%A8js%E5%87%BD%E6%95%B0/"/>
    <id>https://leehave.github.io/2016/11/04/常用js函数/</id>
    <published>2016-11-04T05:15:19.000Z</published>
    <updated>2016-11-04T05:15:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h3><p>jquery ajax函数</p>
<p>我自己封装了一个ajax的函数，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var Ajax = function(url, type success, error) &#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url: url,</div><div class="line">        type: type,</div><div class="line">        dataType: &apos;json&apos;,</div><div class="line">        timeout: 10000,</div><div class="line">        success: function(d) &#123;</div><div class="line">            var data = d.data;</div><div class="line">            success &amp;&amp; success(data);</div><div class="line">        &#125;,</div><div class="line">        error: function(e) &#123;</div><div class="line">            error &amp;&amp; error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    &#125;;</div><div class="line">// 使用方法：</div><div class="line">Ajax(&apos;/data.json&apos;, &apos;get&apos;, function(data) &#123;</div><div class="line">    console.log(data);</div><div class="line">    &#125;);</div><div class="line">jsonp方式</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>有时候我们为了跨域，要使用jsonp的方法，我也封装了一个函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function jsonp(config) &#123;</div><div class="line">    var options = config || &#123;&#125;;   // 需要配置url, success, time, fail四个属性</div><div class="line">    var callbackName = (&apos;jsonp_&apos; + Math.random()).replace(&quot;.&quot;, &quot;&quot;);</div><div class="line">    var oHead = document.getElementsByTagName(&apos;head&apos;)[0];</div><div class="line">    var oScript = document.createElement(&apos;script&apos;);</div><div class="line">    oHead.appendChild(oScript);</div><div class="line">    window[callbackName] = function(json) &#123;  //创建jsonp回调函数</div><div class="line">        oHead.removeChild(oScript);</div><div class="line">        clearTimeout(oScript.timer);</div><div class="line">        window[callbackName] = null;</div><div class="line">        options.success &amp;&amp; options.success(json);   //先删除script标签，实际上执行的是success函数</div><div class="line">    &#125;;</div><div class="line">    oScript.src = options.url + &apos;?&apos; + callbackName;    //发送请求</div><div class="line">    if (options.time) &#123;  //设置超时处理</div><div class="line">        oScript.timer = setTimeout(function () &#123;</div><div class="line">            window[callbackName] = null;</div><div class="line">            oHead.removeChild(oScript);</div><div class="line">            options.fail &amp;&amp; options.fail(&#123; message: &quot;超时&quot; &#125;);</div><div class="line">        &#125;, options.time);</div><div class="line">    &#125;</div><div class="line">    &#125;;</div><div class="line">// 使用方法：</div><div class="line">jsonp(&#123;</div><div class="line">    url: &apos;/b.com/b.json&apos;,</div><div class="line">    success: function(d)&#123;</div><div class="line">        //数据处理</div><div class="line">    &#125;,</div><div class="line">    time: 5000,</div><div class="line">    fail: function()&#123;</div><div class="line">        //错误处理</div><div class="line">    &#125;       </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="常用正则验证表达式"><a href="#常用正则验证表达式" class="headerlink" title="常用正则验证表达式"></a>常用正则验证表达式</h3><p>手机号验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var validate = function(num) &#123;</div><div class="line">    var exp = /^1[3-9]\d&#123;9&#125;$/;</div><div class="line">    return exp.test(num);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>身份证号验证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var exp = /^[1-9]&#123;1&#125;[0-9]&#123;14&#125;$|^[1-9]&#123;1&#125;[0-9]&#123;16&#125;([0-9]|[xX])$/;</div><div class="line">ip验证</div><div class="line"></div><div class="line">var exp = /^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/;</div><div class="line">常用js函数</div></pre></td></tr></table></figure>
<p>返回顶部</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(window).scroll(function() &#123;</div><div class="line">    var a = $(window).scrollTop();</div><div class="line">    if(a &gt; 100) &#123;</div><div class="line">        $(&apos;.go-top&apos;).fadeIn();</div><div class="line">    &#125;else &#123;</div><div class="line">        $(&apos;.go-top&apos;).fadeOut();</div><div class="line">    &#125;</div><div class="line">    &#125;);</div><div class="line">$(&quot;.go-top&quot;).click(function()&#123;</div><div class="line">    $(&quot;html,body&quot;).animate(&#123;scrollTop:&quot;0px&quot;&#125;,&apos;600&apos;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>阻止冒泡</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function stopBubble(e)&#123;</div><div class="line">    e = e || window.event;  </div><div class="line">    if(e.stopPropagation)&#123;</div><div class="line">        e.stopPropagation();  //W3C阻止冒泡方法  </div><div class="line">    &#125;else &#123;  </div><div class="line">        e.cancelBubble = true; //IE阻止冒泡方法  </div><div class="line">    &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>全部替换replaceAll</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var replaceAll = function(bigStr, str1, str2) &#123;  //把bigStr中的所有str1替换为str2</div><div class="line">    var reg = new RegExp(str1, &apos;gm&apos;);</div><div class="line">    return bigStr.replace(reg, str2);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>获取浏览器url中的参数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var getURLParam = function(name) &#123;</div><div class="line">    return decodeURIComponent((new RegExp(&apos;[?|&amp;]&apos; + name + &apos;=&apos; + &apos;([^&amp;;]+?)(&amp;|#|;|$)&apos;, &quot;ig&quot;).exec(location.search) || [, &quot;&quot;])[1].replace(/\+/g, &apos;%20&apos;)) || null;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>深度拷贝对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function cloneObj(obj) &#123;</div><div class="line">    var o = obj.constructor == Object ? new obj.constructor() : new obj.constructor(obj.valueOf());</div><div class="line">    for(var key in obj)&#123;</div><div class="line">        if(o[key] != obj[key] )&#123;</div><div class="line">            if(typeof(obj[key]) == &apos;object&apos; )&#123;</div><div class="line">                o[key] = mods.cloneObj(obj[key]);</div><div class="line">            &#125;else&#123;</div><div class="line">                o[key] = obj[key];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return o;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>数组去重</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var unique = function(arr) &#123;</div><div class="line">    var result = [], json = &#123;&#125;;</div><div class="line">    for (var i = 0, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        if (!json[arr[i]]) &#123;</div><div class="line">            json[arr[i]] = 1;</div><div class="line">            result.push(arr[i]);  //返回没被删除的元素</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>判断数组元素是否重复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var isRepeat = function(arr) &#123;  //arr是否有重复元素</div><div class="line">    var hash = &#123;&#125;;</div><div class="line">    for (var i in arr) &#123;</div><div class="line">        if (hash[arr[i]]) return true;</div><div class="line">        hash[arr[i]] = true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>生成随机数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function randombetween(min, max)&#123;</div><div class="line">    return min + (Math.random() * (max-min +1));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>操作cookie</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">own.setCookie = function(cname, cvalue, exdays)&#123;</div><div class="line">    var d = new Date();</div><div class="line">    d.setTime(d.getTime() + (exdays*24*60*60*1000));</div><div class="line">    var expires = &apos;expires=&apos;+d.toUTCString();</div><div class="line">    document.cookie = cname + &apos;=&apos; + cvalue + &apos;; &apos; + expires;</div><div class="line">    &#125;;</div><div class="line">own.getCookie = function(cname) &#123;</div><div class="line">    var name = cname + &apos;=&apos;;</div><div class="line">    var ca = document.cookie.split(&apos;;&apos;);</div><div class="line">    for(var i=0; i&lt; ca.length; i++) &#123;</div><div class="line">        var c = ca[i];</div><div class="line">        while (c.charAt(0) == &apos; &apos;) c = c.substring(1);</div><div class="line">        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);</div><div class="line">    &#125;</div><div class="line">    return &apos;&apos;;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="知识技巧总结"><a href="#知识技巧总结" class="headerlink" title="知识技巧总结"></a>知识技巧总结</h3><p>数据类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">underfined、null、0、false、NaN、空字符串。他们的逻辑非结果均为true。</div></pre></td></tr></table></figure>
<p>闭包格式</p>
<p>好处：避免命名冲突（全局变量污染）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function(a, b) &#123;</div><div class="line">    console.log(a+b);  //30</div><div class="line">    &#125;)(10, 20);</div></pre></td></tr></table></figure>
<p>截取和清空数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [12, 222, 44, 88];</div><div class="line">arr.length = 2;   //截取，arr = [12, 222];  </div><div class="line">arr.length = 0;   //清空，arr will be equal to [].</div></pre></td></tr></table></figure>
<p>获取数组的最大最小值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var numbers = [5, 45822, 120, -215];</div><div class="line">var maxInNumbers = Math.max.apply(Math, numbers);   //45822</div><div class="line">var minInNumbers = Math.min.apply(Math, numbers);   //-215</div></pre></td></tr></table></figure>
<p>浮点数计算问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.1 + 0.2 == 0.3   //false</div></pre></td></tr></table></figure>
<p>为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示。可以通过使用toFixed()来解决这个问题。</p>
<p>数组排序sort函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 5, 6, 3];    //数字数组</div><div class="line">arr.sort(function(a, b) &#123;</div><div class="line">    return a - b;   //从小到大排</div><div class="line">    return b - a;   //从大到小排</div><div class="line">    return Math.random() - 0.5;   //数组洗牌</div><div class="line">    &#125;);</div><div class="line">var arr = [&#123;   //对象数组</div><div class="line">    num: 1,</div><div class="line">    text: &apos;num1&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">    num: 5,</div><div class="line">    text: &apos;num2&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">    num: 6,</div><div class="line">    text: &apos;num3&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">    num: 3,</div><div class="line">    text: &apos;num4&apos;</div><div class="line">    &#125;];   </div><div class="line">arr.sort(function(a, b) &#123;</div><div class="line">    return a.num - b.num;   //从小到大排</div><div class="line">    return b.num - a.num;   //从大到小排</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>对象和字符串的转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;a: &apos;aaa&apos;, b: &apos;bbb&apos;&#125;;</div><div class="line">var objStr = JSON.stringify(obj);    // &quot;&#123;&quot;a&quot;:&quot;aaa&quot;,&quot;b&quot;:&quot;bbb&quot;&#125;&quot;</div><div class="line">var newObj = JSON.parse(objStr);     // &#123;a: &quot;aaa&quot;, b: &quot;bbb&quot;&#125;</div></pre></td></tr></table></figure>
<h3 id="git笔记"><a href="#git笔记" class="headerlink" title="git笔记"></a>git笔记</h3><p>git使用之前的配置</p>
<p> <code>git config --global</code> <code>user.email xxx@163.com</code><br> <code>git config --global</code> <code>user.name xxx</code><br> <code>ssh-keygen -t rsa -C</code> <code>xxx@163.com(邮箱地址)</code>      // 生成ssh<br> 找到 <code>.ssh</code> 文件夹打开，使用 <code>cat id_rsa.pub</code>    //打开公钥ssh串<br> 登陆 <code>github，settings － SSH keys  － add ssh keys</code> （把上面的内容全部添加进去即可）<br>说明：然后这个邮箱（xxxxx@gmail.com）对应的账号在github上就有权限对仓库进行操作了。可以尽情的进行下面的git命令了。<br>git常用命令</p>
<p> <code>git config user.name</code>  /  <code>user.email</code>     //查看当前git的用户名称、邮箱<br> <code>git clone https://github.com/jarson7426/javascript.git  project</code>  //clone仓库到本地。<br> 修改本地代码，提交到分支:  <code>git add file</code>   /   <code>git commit -m</code> “新增文件”<br> 把本地库推送到远程库:  <code>git push origin master</code><br> 查看提交日志：<code>git log -5</code><br> 返回某一个版本：<code>git reset --hard 123</code><br> 分支：<code>git branch</code> / <code>git checkout name</code>  / <code>git checkout -b dev</code><br> 合并name分支到当前分支：<code>git merge name</code>   /   <code>git pull origin</code><br> 删除本地分支：<code>git branch -D name</code><br> 删除远程分支： <code>git push origin  :daily/x.x.x</code><br> <code>git checkout -b mydev origin/daily/1.0.0</code>   //把远程daily分支映射到本地mydev分支进行开发<br> 合并远程分支到当前分支 git pull origin daily/1.1.1<br> 发布到线上：<br>    <code>git tag publish/0.1.5</code><br>    <code>git push origin publish/0.1.5:publish/0.1.5</code><br>    14、线上代码覆盖到本地：<br>    <code>git checkout --theirs build/scripts/ddos</code><br>    <code>git checkout --theirs src/app/ddos</code> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Ajax请求&quot;&gt;&lt;a href=&quot;#Ajax请求&quot; class=&quot;headerlink&quot; title=&quot;Ajax请求&quot;&gt;&lt;/a&gt;Ajax请求&lt;/h3&gt;&lt;p&gt;jquery ajax函数&lt;/p&gt;
&lt;p&gt;我自己封装了一个ajax的函数，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var Ajax = function(url, type success, error) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url: url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: type,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dataType: &amp;apos;json&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        timeout: 10000,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        success: function(d) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            var data = d.data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            success &amp;amp;&amp;amp; success(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: function(e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            error &amp;amp;&amp;amp; error(e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 使用方法：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Ajax(&amp;apos;/data.json&amp;apos;, &amp;apos;get&amp;apos;, function(data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jsonp方式&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="函数 总结" scheme="https://leehave.github.io/tags/%E5%87%BD%E6%95%B0-%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>javascript面试题</title>
    <link href="https://leehave.github.io/2016/10/09/%E5%87%A0%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://leehave.github.io/2016/10/09/几道面试题/</id>
    <published>2016-10-09T07:43:24.000Z</published>
    <updated>2016-10-09T07:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这些题目是考察JavaScript函数的基本概念内容</p>
</blockquote>
<h2 id="1-以下所有示例都会弹出-quot-Boo-quot-警告窗-您能解释其中的原因吗"><a href="#1-以下所有示例都会弹出-quot-Boo-quot-警告窗-您能解释其中的原因吗" class="headerlink" title="1.以下所有示例都会弹出 &quot;Boo&quot;警告窗,您能解释其中的原因吗?"></a>1.以下所有示例都会弹出 <code>&quot;Boo&quot;</code>警告窗,您能解释其中的原因吗?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var f = alert;</div><div class="line">eval(&apos;f(&quot;Boo!&quot;)&apos;);</div><div class="line">undefined</div><div class="line"></div><div class="line"></div><div class="line">//2</div><div class="line">var e;</div><div class="line">var f = alert;</div><div class="line">eval(&apos;e=f&apos;)(&apos;Boo&apos;);</div><div class="line">undefined</div><div class="line"></div><div class="line">//3</div><div class="line">(function()&#123;</div><div class="line">   return alert;</div><div class="line">&#125;)()(&apos;Boo&apos;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-下面代码中-alert-弹出的内容会是什么"><a href="#2-下面代码中-alert-弹出的内容会是什么" class="headerlink" title="2.下面代码中,alert()弹出的内容会是什么?"></a>2.下面代码中,alert()弹出的内容会是什么?</h2><figure class="highlight plain"><figcaption><span>a = 1;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function f() &#123;</div><div class="line">  var a = 2;</div><div class="line">  function n() &#123;</div><div class="line">    alert(a);</div><div class="line">  &#125;</div><div class="line">  n();</div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure>
<h2 id="3-如果在控制台中执行以下各行-分别会输出什么内容"><a href="#3-如果在控制台中执行以下各行-分别会输出什么内容" class="headerlink" title="3.如果在控制台中执行以下各行,分别会输出什么内容?"></a>3.如果在控制台中执行以下各行,分别会输出什么内容?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;lel&apos;)</div><div class="line">parseFloat(&apos;lel&apos;)</div><div class="line">isFinite(0/10)</div><div class="line">isFinite(20/0)</div><div class="line">isNaN(parseInt(NaN))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这些题目是考察JavaScript函数的基本概念内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-以下所有示例都会弹出-quot-Boo-quot-警告窗-您能解释其中的原因吗&quot;&gt;&lt;a href=&quot;#1-以下所有示例都会弹出-quot-Boo-quot-警告窗-您能解释其中的原因吗&quot; class=&quot;headerlink&quot; title=&quot;1.以下所有示例都会弹出 &amp;quot;Boo&amp;quot;警告窗,您能解释其中的原因吗?&quot;&gt;&lt;/a&gt;1.以下所有示例都会弹出 &lt;code&gt;&amp;quot;Boo&amp;quot;&lt;/code&gt;警告窗,您能解释其中的原因吗?&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var f = alert;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;eval(&amp;apos;f(&amp;quot;Boo!&amp;quot;)&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var f = alert;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;eval(&amp;apos;e=f&amp;apos;)(&amp;apos;Boo&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return alert;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)()(&amp;apos;Boo&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://leehave.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vuejs结构分析</title>
    <link href="https://leehave.github.io/2016/09/05/vue%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://leehave.github.io/2016/09/05/vue构建项目结构解析/</id>
    <published>2016-09-05T15:27:09.000Z</published>
    <updated>2016-09-05T15:27:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Vue.js是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>其实还是后端玩的那套,只不过借以用之</p>
</blockquote>
<ul>
<li>下面我们来看下vue的VM层结构</li>
</ul>
<blockquote>
<p>文档结构如下</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/d3cfb1009c60abf4.jpg" alt=""></p>
<p>APP是单页起始的父组件模板 其余子组件全部在 <code>conponents</code>文件夹中</p>
<a id="more"></a>
<blockquote>
<p>文档引入如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">	&lt;div class=&quot;goods-container&quot;&gt;</div><div class="line">		&lt;goods-top-box&gt;&lt;/goods-top-box&gt;</div><div class="line">		&lt;goods-collocation&gt;&lt;/goods-collocation&gt;</div><div class="line">		&lt;goods-accessories&gt;&lt;/goods-accessories&gt;</div><div class="line">		&lt;goods-around&gt;&lt;/goods-around&gt;</div><div class="line">		&lt;recommend&gt;&lt;/recommend&gt;</div><div class="line">		&lt;hot-product&gt;&lt;/hot-product&gt;</div><div class="line">		&lt;goods-content&gt;&lt;/goods-content&gt;</div><div class="line">		&lt;video&gt;&lt;/video&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import GoodsTopBox from &apos;./GoodsTopBox&apos;</div><div class="line">import GoodsCollocation from &apos;./GoodsCollocation&apos;</div><div class="line">import GoodsAccessories from &apos;./GoodsAccessories&apos;</div><div class="line">import GoodsAround from &apos;./GoodsAround&apos;</div><div class="line">import Recommend from &apos;./Recommend&apos;</div><div class="line">import HotProduct from &apos;./HotProduct&apos;</div><div class="line">import GoodsContent from &apos;./GoodsContent&apos;</div><div class="line">import Video from &apos;./Video&apos;vue</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">	components: &#123;</div><div class="line">		&apos;goods-top-box&apos;: GoodsTopBox,</div><div class="line">		&apos;goods-collocation&apos;: GoodsCollocation,</div><div class="line">		&apos;goods-accessories&apos;: GoodsAccessories,</div><div class="line">		&apos;goods-around&apos;: GoodsAround,</div><div class="line">		&apos;recommend&apos;: Recommend,</div><div class="line">		&apos;hot-product&apos;: HotProduct,</div><div class="line">		&apos;goods-content&apos;: GoodsContent,</div><div class="line">		&apos;video&apos;: Video</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">.goods-container &#123;</div><div class="line">	width: 100%;</div><div class="line">	height: auto;</div><div class="line">	background: #f5f5f5;</div><div class="line">	padding-bottom: 40px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们再看看这个控制台显示</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/df3bab7d4acee9c5.jpg" alt=""></p>
<blockquote>
<p>我们用Google扩展工具vue-devtools工具</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/d742cfd522161991.jpg" alt=""></p>
<p>我们不难发现 一些公共组件都放在common里面 例如slide之类的子组件</p>
<blockquote>
<p>可以使用 v-for 指令基于一个数组渲染一个列表。</p>
</blockquote>
<p>这个指令使用特殊的语法，形式为 item in items，items 是数据数组，item 是当前数组元素的别名,DOM都由前端渲染生成,后端只需传递数据,无需再<br>有前端模板和逻辑,后端语言混淆,我们只需要改变VM结构,便不再像传统非MVVM一样去手动修改完逻辑又去修改DOM结构。用来开发移动端更方便管理应用状态，组件解耦，多人组件共享等等(正在摸索,以前用MUI,SUI之类的jqery库主导的UI库)。<br>下面来看看v-for如何渲染DOM层</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">	&lt;div class=&quot;product-container&quot;&gt;</div><div class="line">		&lt;goods-header :title=&quot;title&quot;&gt;&lt;/goods-header&gt;</div><div class="line">		&lt;div class=&quot;box-bd&quot;&gt;</div><div class="line">			&lt;ul class=&quot;content-list clearfix&quot;&gt;</div><div class="line">				&lt;li&gt;</div><div class="line">					&lt;template v-for=&quot;content in contents&quot;&gt;</div><div class="line">						&lt;good-content-slide :content=&quot;content&quot;&gt;&lt;/good-content-slide&gt;</div><div class="line">					&lt;/template&gt;</div><div class="line">				&lt;/li&gt;</div><div class="line">			&lt;/ul&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>数据层json传递数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">import GoodsHeader from &apos;./common/GoodsHeader&apos;</div><div class="line">import GoodsContentSlide from &apos;./common/GoodsContentSlide&apos;</div><div class="line">export default &#123;</div><div class="line">	data () &#123;</div><div class="line">		return &#123;</div><div class="line">			currPage: 0,</div><div class="line">			title: &apos;内容&apos;,</div><div class="line">			contents: [</div><div class="line">				&#123;</div><div class="line">					title: &apos;图书&apos;,</div><div class="line">					type: &apos;book&apos;,</div><div class="line">					list: [</div><div class="line">						&#123;sourceUrl: &apos;http://www.duokan.com/book/115222&apos;, title: &apos;哈利·波特与魔法石&apos;, desc: &apos;哈利波特来了&apos;, imgUrl: &apos;//i3.mifile.cn/a4/8e3584b6-3169-41c6-9356-939ec79aac2b&apos;, type: 0&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://www.duokan.com/special/7812&apos;, title: &apos;特价专区&apos;, desc: &apos;精选畅销好书，特价促销，天天更新，天天特价！&apos;, price: &apos;限时优惠&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T1dlVgBbbT1RXrhCrK.jpg&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://www.duokan.com/list/9-1&apos;, title: &apos;杂志专区&apos;, desc: &apos;纸媒杂志＋互联网杂志，你想看的这都有！&apos;, price: &apos;同步新刊上线&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T1R3WgBjKT1RXrhCrK.jpg&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://www.duokan.com/list/1-1?from=xiaomi&apos;, desc1: &apos;海量好书，享受精品阅读时光&apos;, desc2: &apos;漂亮的中文排版，千万读者选择！&apos;, btnTxt: &apos;前往多看阅读&apos;, price: &apos;限时优惠&apos;, imgUrl: &apos;//s01.mifile.cn/i/index/more-duokan.jpg&apos;, type: 2&#125;</div><div class="line">					]</div><div class="line">				&#125;,</div><div class="line">				&#123;</div><div class="line">					title: &apos;MIUI主题&apos;,</div><div class="line">					type: &apos;theme&apos;,</div><div class="line">					list: [</div><div class="line">						&#123;sourceUrl: &apos;http://zhuti.xiaomi.com/detail/4ecf4ebb-7cba-4142-96aa-6b8deb2426ef&apos;, title: &apos;新世纪福音战士OL&apos;, desc: &apos;EVA手游正版授权，同名主题，高能来袭！&apos;, price: &apos;免费&apos;, imgUrl: &apos;http://i3.mifile.cn/a4/7d47dde1-60fb-4ff3-8fa1-364cfc452457&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://zhuti.xiaomi.com/detail/d6277519-ca46-420c-ab09-060f6d293f94&apos;, title: &apos;世界就在这里&apos;, desc: &apos;“青春的世界里，每一刻都要用尽全力欢呼”&apos;, price: &apos;免费&apos;, imgUrl: &apos;http://i3.mifile.cn/a4/b2c8ca37-4ba8-4af8-b87e-91847980a278&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://zhuti.xiaomi.com/detail/13df18d4-e52c-4a61-82e3-97014f21bd77&apos;, title: &apos;不悔剑三&apos;, desc: &apos;精品剑网三同人主题 浪漫武侠 共闯天涯&apos;, price: &apos;3米币&apos;, imgUrl: &apos;http://i3.mifile.cn/a4/10af68f9-3012-48bb-85b1-ad3b0646dfdb&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://zhuti.xiaomi.com/?from=mi&apos;, desc1: &apos;众多个性主题、百变锁屏与自由桌面&apos;, desc2: &apos;让你的手机与众不同！&apos;, btnTxt: &apos;前往MIUI主题市场&apos;, price: &apos;限时优惠&apos;, imgUrl: &apos;//s01.mifile.cn/i/index/more-duokan.jpg&apos;, type: 2&#125;</div><div class="line">					]</div><div class="line">				&#125;,</div><div class="line">				&#123;</div><div class="line">					title: &apos;游戏&apos;,</div><div class="line">					type: &apos;game&apos;,</div><div class="line">					list: [</div><div class="line">						&#123;sourceUrl: &apos;http://ljm.mi.com/?channel=meng_1084_1_android&apos;, title: &apos;老九门&apos;, desc: &apos;盗墓笔记前传上线&apos;, price: &apos;免费&apos;, imgUrl: &apos;http://i3.mifile.cn/a4/6032cb36-587f-4366-89ef-aefed2546552&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://game.xiaomi.com/miyou/index.html&apos;, title: &apos;米柚手游模拟器&apos;, desc: &apos;在电脑上玩遍小米所有手游&apos;, price: &apos;免费&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T1czW_BXCv1R4cSCrK.png&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://game.xiaomi.com/app-appdetail--app_id__581412.html&apos;, title: &apos;剑侠情缘&apos;, desc: &apos;玩剑侠情缘手游，领666壕礼！！&apos;, price: &apos;免费&apos;, imgUrl: &apos;http://i3.mifile.cn/a4/010948ae-bd48-49c6-af12-4ec8c4a0c829&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://game.xiaomi.com/index.php?c=index&amp;a=run&apos;, desc1: &apos;免费下载海量的手机游戏&apos;, desc2: &apos;天天都有现金福利赠送&apos;, btnTxt: &apos;前往小米游戏商店&apos;, price: &apos;限时优惠&apos;, imgUrl: &apos;//s01.mifile.cn/i/index/more-game.jpg&apos;, type: 2&#125;</div><div class="line">					]</div><div class="line">				&#125;,</div><div class="line">				&#123;</div><div class="line">					title: &apos;应用&apos;,</div><div class="line">					type: &apos;app&apos;,</div><div class="line">					list: [</div><div class="line">						&#123;sourceUrl: &apos;http://app.mi.com/subject/168797&apos;, title: &apos;2015年度应用&apos;, desc: &apos;2015年度应用&apos;, price: &apos;免费&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T1YyJgBCYv1R4cSCrK.png&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://app.mi.com/subject/168798&apos;, title: &apos;2015年度游戏&apos;, desc: &apos;2015年度游戏&apos;, price: &apos;免费&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T1eaxgB4Ev1R4cSCrK.png&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://app.mi.com/subject/167924&apos;, title: &apos;小米应用&apos;, desc: &apos;小米出品 必属精品&apos;, price: &apos;免费&apos;, imgUrl: &apos;//i3.mifile.cn/a4/T15VZvB5Kv1R4cSCrK.png&apos;, type: 1&#125;,</div><div class="line">						&#123;sourceUrl: &apos;http://app.mi.com/?from=mi&apos;, desc1: &apos;帮助小米手机和其他安卓手机用户&apos;, desc2: &apos;发现好用的安卓应用&apos;, btnTxt: &apos;前往小米应用商店&apos;, price: &apos;限时优惠&apos;, imgUrl: &apos;//s01.mifile.cn/i/index/more-app.jpg&apos;, type: 2&#125;</div><div class="line">					]</div><div class="line">				&#125;]</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	components: &#123;</div><div class="line">		&apos;goods-header&apos;: GoodsHeader,</div><div class="line">		&apos;good-content-slide&apos;: GoodsContentSlide</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这样的前后端分离,效率是不是提高了很多!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue.js是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。&lt;br&gt;其实还是后端玩的那套,只不过借以用之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;下面我们来看下vue的VM层结构&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;文档结构如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/d3cfb1009c60abf4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;APP是单页起始的父组件模板 其余子组件全部在 &lt;code&gt;conponents&lt;/code&gt;文件夹中&lt;/p&gt;
    
    </summary>
    
    
      <category term="解析" scheme="https://leehave.github.io/tags/%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vue开发环境设置</title>
    <link href="https://leehave.github.io/2016/09/05/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/"/>
    <id>https://leehave.github.io/2016/09/05/开发环境设置/</id>
    <published>2016-09-05T06:31:01.000Z</published>
    <updated>2016-09-05T06:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能实现的 ECMAScript 5 特性。 Vue.js 支持所有兼容 ECMAScript 5 的浏览器。</p>
</blockquote>
<ul>
<li><p>编辑工具：atom，64位。</p>
<ul>
<li>安装过程<ol>
<li>解压 atom.zip 文件夹到自己的工具盘下。</li>
<li>修改atom快捷方式中的路径为自己工具盘的路径。</li>
</ol>
</li>
<li>配置过程<ol>
<li>解压.atom.rar 到自己机器的当前用户的根目录下。这个文件夹是atom的使用配置文件，包括：<ul>
<li>git-plus插件：git插件</li>
<li>language-vue: vue组件开发语法加亮</li>
<li>linter: 语法检查插件</li>
<li>linter-eslint：对js文件、vue组件进行语法检查的插件</li>
<li>snippets.cson文件：内置了一些vue组件的代码片段<a id="more"></a></li>
</ul>
</li>
</ol>
</li>
<li>使用方式<ul>
<li>atom 主要使用快捷键，文档参考：<ul>
<li><a href="http://ju.outofmemory.cn/entry/187281" target="_blank" rel="external">atom快捷键</a></li>
<li><a href="http://flight-manual.atom.io/using-atom/" target="_blank" rel="external">官方使用手册</a></li>
</ul>
</li>
<li>文档编写使用markdown，文档参考：<ul>
<li><a href="http://blog.chinaunix.net/uid-7374279-id-5114730.html" target="_blank" rel="external">markdown语言详解</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>开发工具：nodejs，64位</p>
<ul>
<li>安装过程<ol>
<li>解压 nodejs.rar 文件夹到自己的工具盘下。</li>
<li>设置系统环境变量Path，把nodejs安装的根目录添加进去。</li>
<li>命令行下运行npm, 可以看到使用帮助，证明成功。</li>
</ol>
</li>
<li>配置过程<ol>
<li>解压 npm.rar 到自己机器当前用户的AppData\Roaming文件夹下。AppData文件夹是系统隐藏文件夹，如找不到，设置显示隐藏文件夹即可。npm文件夹中有全局模块，可以在所有项目里共享。</li>
</ol>
</li>
<li>使用发生<ul>
<li>npm 要在命令行下运行，文档参考：<ul>
<li><a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="external">npm使用</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Git工具</p>
<ul>
<li>安装过程<ol>
<li>解压 git.rar 文件夹到自己的工具盘下。</li>
<li>设置系统环境变量Path，内容为 <code>安装路径/git/cmd</code></li>
<li>命令行下运行git, 可以看到使用帮助，证明成功。</li>
</ol>
</li>
<li>配置过程<ol>
<li>复制.gitconfig文件到$HOME下。</li>
</ol>
</li>
</ul>
</li>
<li><p>chrome安装</p>
<ul>
<li>安装过程<ol>
<li>解压chrome.rar到自己的工具盘下。</li>
<li>运行Chrome\Application\chrome.exe</li>
<li>解压vue-devtools.rar到自己的工具盘下</li>
<li>在chrome的 <code>更多工具\扩展程序</code> 里，选择 <code>开发模式</code>，点击 <code>已解压的扩展程序</code>，选择vue-devtools解压处理的文件夹即可。安装的是vue的chrome扩展工具。</li>
</ol>
</li>
</ul>
</li>
<li><p>vue-client工程，前台vue组件的基础工程</p>
<ul>
<li><p>安装过程</p>
<ol>
<li><p>在github上下载最新版本到自己的工作区间。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/DuBin1988/vue-client</div></pre></td></tr></table></figure>
</li>
<li><p>在atom里 File/Add Project Folder 菜单中加入vue-client工程</p>
</li>
<li>解压vue-client\node_modules.rar 到vue-client目录下，这个文件是vue-client的本地模块文件夹</li>
</ol>
</li>
<li>测试<ol>
<li>修改examples下所有文件名首字母为大写</li>
<li>在命令行下，进入vue-client目录</li>
<li>运行 <code>npm run dev</code> 启动测试</li>
<li>在chrome里执行 <a href="http://localhost:8080/Busy.html" target="_blank" rel="external">http://localhost:8080/Busy.html</a> 测试busy组件是否正常运行。</li>
<li>按 <code>F12</code> 打开chrome的开发者环境，可以看到vue-Devtools，用这个工具，可以看到组件树。</li>
</ol>
</li>
<li>自己动手<ol>
<li>复制examples下的Busy文件夹，改名为Test</li>
<li>修改index.html <code>&lt;script src=&quot;../BusyApp.js&quot;&gt;&lt;/script&gt;</code>中 BusyApp 为 TestApp</li>
<li>main.js保持不动。</li>
<li>App.vue是自己要做的组件，修改组件模板部分为自己想要的内容。重启 <code>npm run dev</code>，访问 <a href="http://localhost:8080/Test.html，即可看到自己所做的组件。" target="_blank" rel="external">http://localhost:8080/Test.html，即可看到自己所做的组件。</a></li>
</ol>
</li>
<li>更多内容<ul>
<li>组件制作请参考：<a href="http://cn.vuejs.org/" target="_blank" rel="external">http://cn.vuejs.org/</a></li>
<li>JS6请参考：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></li>
<li>BootStrap请参考：<a href="http://v3.bootcss.com/" target="_blank" rel="external">http://v3.bootcss.com/</a></li>
</ul>
</li>
<li>工作规范<br>一般情况下，遵循如下工作规范：<ul>
<li>在docs里对要开发的组件，进行设计及说明，格式可以参考Busy.md等文件。</li>
<li>开发的组件，放在src/components下。</li>
<li>在examples下建立文件夹，对开发的组件进行测试。</li>
<li>提交前，对docs及组件源码进行检查，确定是否最终内容。</li>
<li>在进行新版本发布时，修改CHANGELOG.md，CHANGELOG.md书写规范，参考：<a href="http://keepachangelog.com/zh-CN/" target="_blank" rel="external">http://keepachangelog.com/zh-CN/</a></li>
<li>vue-client下的README.md是vue-client的整体描述。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能实现的 ECMAScript 5 特性。 Vue.js 支持所有兼容 ECMAScript 5 的浏览器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编辑工具：atom，64位。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装过程&lt;ol&gt;
&lt;li&gt;解压 atom.zip 文件夹到自己的工具盘下。&lt;/li&gt;
&lt;li&gt;修改atom快捷方式中的路径为自己工具盘的路径。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;配置过程&lt;ol&gt;
&lt;li&gt;解压.atom.rar 到自己机器的当前用户的根目录下。这个文件夹是atom的使用配置文件，包括：&lt;ul&gt;
&lt;li&gt;git-plus插件：git插件&lt;/li&gt;
&lt;li&gt;language-vue: vue组件开发语法加亮&lt;/li&gt;
&lt;li&gt;linter: 语法检查插件&lt;/li&gt;
&lt;li&gt;linter-eslint：对js文件、vue组件进行语法检查的插件&lt;/li&gt;
&lt;li&gt;snippets.cson文件：内置了一些vue组件的代码片段
    
    </summary>
    
    
      <category term="MVVM" scheme="https://leehave.github.io/tags/MVVM/"/>
    
      <category term="vuejs" scheme="https://leehave.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>前端开发面试题之JavaScript</title>
    <link href="https://leehave.github.io/2016/08/04/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8BJavaScript/"/>
    <id>https://leehave.github.io/2016/08/04/前端开发面试题之JavaScript/</id>
    <published>2016-08-04T05:54:55.000Z</published>
    <updated>2016-08-04T05:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p> 原作者晓松链接 <a href="http://www.jianshu.com/p/05d84b60a1dc" target="_blank" rel="external">http://www.jianshu.com/p/05d84b60a1dc</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1714316-71dd9f7c05c24792.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>“每18至24个月，前端都会难一倍”</p>
<p>——赫门 “2015深JS大会《前端服务化之路》主题演讲”</p>
</blockquote>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p><code>数据类型</code>、<code>运算</code>、<code>对象</code>、<code>function</code>、<code>继承</code>、<code>闭包</code>、<code>作用域</code>、<code>原型链</code>、<code>事件</code>、<code>RegExp</code>、<code>JSON</code>、<code>Ajax</code>、<code>DOM</code>、<code>BOM</code>、<code>内存泄漏</code>、<code>跨域</code>、<code>异步加载</code>、<code>模板引擎</code>、<code>前端MVC</code>、<code>前端MVVM</code>、<code>路由</code>、<code>模块化</code>、<code>Canvas</code>、<code>jQuery</code>、<code>ECMAScript 2015（ES6）</code>、<code>Node.js</code>、<code>AngularJS</code>、<code>React</code>、<code>CommonJS</code>、<code>AMD</code>、<code>CMD</code> ……</p>
<a id="more"></a>
<h4 id="题目-amp-答案"><a href="#题目-amp-答案" class="headerlink" title="题目&amp;答案"></a>题目&amp;答案</h4><ul>
<li><p>介绍一下 JS 的基本数据类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Undefined、Null、Boolean、Number、String</div></pre></td></tr></table></figure>
</li>
<li><p>介绍一下 JS 有哪些内置对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object 是 JavaScript 中所有对象的父对象</div><div class="line">数据封装类对象：Object、Array、Boolean、Number、String</div><div class="line">其他对象：Function、Argument、Math、Date、RegExp、Error</div></pre></td></tr></table></figure>
</li>
<li><p>列举几条 JavaScript 的基本代码规范。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">（1）不要在同一行声明多个变量</div><div class="line">（2）如果你不知道数组的长度，使用 push</div><div class="line">（3）请使用 ===/!== 来比较 true/false 或者数值</div><div class="line">（4）对字符串使用单引号 &apos;&apos;(因为大多时候我们的字符串。特别html会出现&quot;)</div><div class="line">（5）使用对象字面量替代 new Array 这种形式</div><div class="line">（6）绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同</div><div class="line">（7）不要使用全局函数</div><div class="line">（8）总是使用 var 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间</div><div class="line">（9）Switch 语句必须带有 default 分支</div><div class="line">（10）使用 /**...*/ 进行多行注释，包括描述，指定类型以及参数值和返回值</div><div class="line">（11）函数不应该有时候有返回值，有时候没有返回值</div><div class="line">（12）语句结束一定要加分号</div><div class="line">（13）for 循环必须使用大括号</div><div class="line">（14）if 语句必须使用大括号</div><div class="line">（15）for-in 循环中的变量应该使用 var 关键字明确限定作用域，从而避免作用域污染</div><div class="line">（16）避免单个字符名，让你的变量名有描述意义</div><div class="line">（17）当命名对象、函数和实例时使用驼峰命名规则</div><div class="line">（18）给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题</div><div class="line">（19）当给事件附加数据时，传入一个哈希而不是原始值，这可以让后面的贡献者加入更多数据到事件数据里，而不用找出并更新那个事件的事件处理器</div></pre></td></tr></table></figure>
</li>
<li><p>介绍一下 JavaScript 原型，原型链，它们有何特点？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，</div><div class="line">于是就这样一直找下去，也就是我们平时所说的原型链的概念。</div><div class="line">关系：instance.constructor.prototype = instance.__proto__</div><div class="line">//</div><div class="line">特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本，当我们修改原型时，与之相关的对象也会继承这一改变。</div><div class="line">//</div><div class="line">当我们需要一个属性时，JavaScript引擎会先看当前对象中是否有这个属性，如果没有的话，就会查找它的prototype对象是否有这个属性，如此递推下去，一致检索到Object内建对象。</div><div class="line">function Func()&#123;&#125;</div><div class="line">Func.prototype.name = &quot;Xiaosong&quot;;</div><div class="line">Func.prototype.getInfo = function() &#123;</div><div class="line">    return this.name;</div><div class="line">&#125;</div><div class="line">var person = new Func();</div><div class="line">console.log(person.getInfo());</div><div class="line">//&quot;Xiaosong&quot;</div><div class="line">console.log(Func.prototype);</div><div class="line">//Func &#123; name = &quot;Xiaosong&quot;, getInfo = function() &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript 有几种类型的值？能否画一下它们的内存图？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">栈：原始数据类型（Undefined，Null，Boolean，Number，String）</div><div class="line">堆：引用数据类型（对象、数组、函数）</div><div class="line">两种类型的区别：存储位置不同</div><div class="line">//</div><div class="line">原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</div><div class="line">引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript 如何实现继承？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(1)构造继承</div><div class="line">(2)原型继承</div><div class="line">(3)实例继承</div><div class="line">(4)拷贝继承</div><div class="line">//</div><div class="line">原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。</div><div class="line">function Parent() &#123;</div><div class="line">    this.name = &apos;song&apos;;</div><div class="line">&#125;</div><div class="line">function Child() &#123;</div><div class="line">    this.age = 28;</div><div class="line">&#125;</div><div class="line">Child.prototype = new Parent(); //通过原型,继承了Parent</div><div class="line">//</div><div class="line">var demo = new Child()l;</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name); //得到被继承的属性</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript 有哪几种创建对象的方式？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</div><div class="line">//</div><div class="line">(1)对象字面量的方式</div><div class="line">person=&#123;firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;&#125;;</div><div class="line">(2)用function来模拟无参的构造函数</div><div class="line">function Person()&#123;&#125;</div><div class="line">var person = new Person(); //定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</div><div class="line">person.name = &quot;Xiaosong&quot;;</div><div class="line">person.age = &quot;23&quot;;</div><div class="line">person.work = function() &#123;</div><div class="line">    alert(&quot;Hello &quot; + person.name);</div><div class="line">&#125;</div><div class="line">person.work();</div><div class="line">(3)用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</div><div class="line">function Person(name,age,hobby) &#123;</div><div class="line">    this.name = name; //this作用域：当前对象</div><div class="line">    this.age = age;</div><div class="line">    this.work = work;</div><div class="line">    this.info = function() &#123;</div><div class="line">        alert(&quot;我叫&quot; + this.name + &quot;，今年&quot; + this.age + &quot;岁，是个&quot; + this.work);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var Xiaosong = new Person(&quot;WooKong&quot;,23,&quot;程序猿&quot;); //实例化、创建对象</div><div class="line">Xiaosong.info(); //调用info()方法</div><div class="line">(4)用工厂方式来创建（内置对象）</div><div class="line">var jsCreater = new Object();</div><div class="line">jsCreater.name = &quot;Brendan Eich&quot;; //JavaScript的发明者</div><div class="line">jsCreater.work = &quot;JavaScript&quot;;</div><div class="line">jsCreater.info = function() &#123;</div><div class="line">    alert(&quot;我是&quot;+this.work+&quot;的发明者&quot;+this.name);</div><div class="line">&#125;</div><div class="line">jsCreater.info();</div><div class="line">(5)用原型方式来创建</div><div class="line">function Standard()&#123;&#125;</div><div class="line">Standard.prototype.name = &quot;ECMAScript&quot;;</div><div class="line">Standard.prototype.event = function() &#123;</div><div class="line">    alert(this.name+&quot;是脚本语言标准规范&quot;);</div><div class="line">&#125;</div><div class="line">var jiaoben = new Standard();</div><div class="line">jiaoben.event();</div><div class="line">(6)用混合方式来创建</div><div class="line">function iPhone(name,event) &#123;</div><div class="line">    this.name = name;</div><div class="line">    this.event = event;</div><div class="line">&#125;</div><div class="line">iPhone.prototype.sell = function() &#123;</div><div class="line">    alert(&quot;我是&quot;+this.name+&quot;，我是iPhone5s的&quot;+this.event+&quot;~ haha!&quot;);</div><div class="line">&#125;</div><div class="line">var SE = new iPhone(&quot;iPhone SE&quot;,&quot;官方翻新机&quot;);</div><div class="line">SE.sell();</div></pre></td></tr></table></figure>
</li>
<li><p>eval 是做什么的？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">它的功能是把对应的字符串解析成JS代码并运行；</div><div class="line">应该避免使用eval，因为不安全，非常耗性能（2次，一次解析成js语句，一次执行）。</div></pre></td></tr></table></figure>
</li>
<li><p>什么是 document 对象？什么是 window 对象？</p>
</li>
</ul>
<ul>
<li><p>null 和 undefined 有何区别？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">null        表示一个对象被定义了，值为“空值”；</div><div class="line">undefined   表示不存在这个值。</div><div class="line">//</div><div class="line">typeof undefined</div><div class="line">    //&quot;undefined&quot;</div><div class="line">    undefined :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；</div><div class="line">    例如变量被声明了，但没有赋值时，就等于undefined。</div><div class="line">//</div><div class="line">typeof null</div><div class="line">    //&quot;object&quot;</div><div class="line">    null : 是一个对象(空对象, 没有任何属性和方法)；</div><div class="line">    例如作为函数的参数，表示该函数的参数不是对象；</div><div class="line">//</div><div class="line">注意：</div><div class="line">    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined</div></pre></td></tr></table></figure>
</li>
<li><p>能否写一个通用的事件侦听器函数？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">//Event工具集，from:github.com/markyun</div><div class="line">markyun.Event = &#123;</div><div class="line">    //页面加载完成后</div><div class="line">    readyEvent: function(fn) &#123;</div><div class="line">        if (fn == null) &#123;</div><div class="line">            fn = document;</div><div class="line">        &#125;</div><div class="line">        var oldonload = window.onload;</div><div class="line">        if (typeof window.onload != &apos;function&apos;) &#123;</div><div class="line">            window.onload = fn;</div><div class="line">        &#125;else&#123;</div><div class="line">            window.onload = function() &#123;</div><div class="line">                oldonload();</div><div class="line">                fn();</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //视能力分别使用 demo0 || demo1 || IE 方式来绑定事件</div><div class="line">    //参数：操作的元素，事件名称，事件处理程序</div><div class="line">    addEvent: function(element,type,handler) &#123;</div><div class="line">        if (element.addEventListener) &#123;</div><div class="line">            //事件类型、需要执行的函数、是否捕捉</div><div class="line">            element.addEventListener(type,handler,false);</div><div class="line">        &#125;else if (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(&apos;on&apos; + type, function() &#123;</div><div class="line">                handler.call(element);</div><div class="line">            &#125;);</div><div class="line">        &#125;else &#123;</div><div class="line">            element[&apos;on&apos; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //移除事件</div><div class="line">    removeEvent: function(element,type,handler) &#123;</div><div class="line">        if (element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type,handler,false);</div><div class="line">        &#125;else if (element.datachEvent) &#123;</div><div class="line">            element.datachEvent(&apos;on&apos; + type,handler);</div><div class="line">        &#125;else&#123;</div><div class="line">            element[&apos;on&apos; + type] = null;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //阻止事件（主要是事件冒泡，因为IE不支持事件捕获）</div><div class="line">    stopPropagation: function(ev) &#123;</div><div class="line">        if (ev.stopPropagation) &#123;</div><div class="line">            ev.stopPropagation();</div><div class="line">        &#125;else &#123;</div><div class="line">            ev.cancelBubble = true;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //取消事件的默认行为</div><div class="line">    preventDefault: function(event) &#123;</div><div class="line">        if (event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125;else&#123;</div><div class="line">            event.returnValue = false;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //获取事件目标</div><div class="line">    getTarget: function(event) &#123;</div><div class="line">        return event.target || event.srcElemnt;</div><div class="line">    &#125;,</div><div class="line">    //获取event对象的引用，取到事件的所有信息，确保随时能使用event；</div><div class="line">    getEvent: function(e) &#123;</div><div class="line">        var ev = e || window.event;</div><div class="line">        if (!ev) &#123;</div><div class="line">            var c = this.getEvent.caller;</div><div class="line">            while(c) &#123;</div><div class="line">                ev = c.argument[0];</div><div class="line">                if (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                c = c.caller;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        retrun ev;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>[“1”,”2”,”3”].map(parseInt) 的答案是多少？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1,NaN,NaN]</div><div class="line">因为 parseInt 需要两个参数(val,radix)，其中 radix 表示解析时用的基数。</div><div class="line">map 传了3个(element,index,array)，对应的 radix 不合法导致解析失败。</div></pre></td></tr></table></figure>
</li>
<li><p>事件是什么？IE与火狐的事件机制有何区别？如何阻止冒泡？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1)我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</div><div class="line">(2)事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</div><div class="line">(3)ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</div></pre></td></tr></table></figure>
</li>
<li><p>什么是闭包(closure)，为什么要用它？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量，利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。</div><div class="line">//</div><div class="line">闭包特性：</div><div class="line">(1)函数内再嵌套函数</div><div class="line">(2)内部函数可以引用外层的参数和变量</div><div class="line">(3)参数和变量不会被垃圾回收机制回收</div><div class="line">//li节点的onclick事件都能正确的弹出当前被点击的li索引</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt; index = 0 &lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 1 &lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 2 &lt;/li&gt;</div><div class="line">    &lt;li&gt; index = 3 &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var nodes = document.getElementsByTagName(&apos;li&apos;);</div><div class="line">    for(i = 0;i&lt;nodes.length;i+=1) &#123;</div><div class="line">        nodes[i].onclick = function() &#123;</div><div class="line">            console.log(i+1); //不使用闭包的话，值每次都是4</div><div class="line">        &#125;(4);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript 代码中的 “use strict”; 是什么意思？使用它的区别是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。</div><div class="line">默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;</div><div class="line">全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；</div><div class="line">消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</div><div class="line">提高编译器效率，增加运行速度；</div><div class="line">为未来新版本的Javascript标准化做铺垫。</div></pre></td></tr></table></figure>
</li>
<li><p>new 操作符具体干了什么呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(1)创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</div><div class="line">(2)属性和方法被加入到 this 引用的对象中。</div><div class="line">(3)新创建的对象由 this 所引用，并且最后隐式的返回 this 。</div><div class="line">//</div><div class="line">var obj = &#123;&#125;;</div><div class="line">obj.__proto__ = Base.prototype;</div><div class="line">Base.call(obj);</div></pre></td></tr></table></figure>
</li>
<li><p>用原生的 JavaScript 实现过什么功能吗？</p>
</li>
</ul>
<ul>
<li><p>JavaScript 中，有一个函数，执行对象查找时，永远不会去查找原型，这个函数是哪个？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hasOwnProperty</div><div class="line">//</div><div class="line">JavaScript 中 hasOwnProperty 函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。</div><div class="line">//</div><div class="line">使用方法：</div><div class="line">object.hasOwnProperty(proName)</div><div class="line">其中参数object是必选项，一个对象的实例。</div><div class="line">proName是必选项，一个属性名称的字符串值。</div><div class="line">//</div><div class="line">如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</div></pre></td></tr></table></figure>
</li>
<li><p>你对 JSON 了解吗？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JSON(JavaScript Object Notation)是一种轻量级的数据交换格式。</div><div class="line">它是基于JavaScript的一个子集。数据格式简单，易于读写，占用带宽小。</div><div class="line">如：</div><div class="line">&#123;&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>js延迟加载的方式有哪些？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defer和async、动态创建DOM方式（用得最多）、按需异步载入js</div></pre></td></tr></table></figure>
</li>
<li><p>Ajax 是什么？如何创建一个 Ajax ？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ajax的全称：Asynchronous Javascript And XML。</div><div class="line">异步传输+js+xml。</div><div class="line">所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。</div><div class="line">//</div><div class="line">(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象</div><div class="line">(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</div><div class="line">(3)设置响应HTTP请求状态变化的函数</div><div class="line">(4)发送HTTP请求</div><div class="line">(5)获取异步调用返回的数据</div><div class="line">(6)使用JavaScript和DOM实现局部刷新</div></pre></td></tr></table></figure>
</li>
<li><p>同步和异步的区别？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">同步的概念应该是来自于操作系统中关于同步的概念:</div><div class="line">不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式)。同步强调的是顺序性，谁先谁后；异步则不存在这种顺序性。</div><div class="line">//</div><div class="line">同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。</div><div class="line">//</div><div class="line">异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</div></pre></td></tr></table></figure>
</li>
<li><p>如何解决跨域问题？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsonp、iframe、window.name、window.postMessage、服务器上设置代理页面</div></pre></td></tr></table></figure>
</li>
<li><p>页面编码和被请求的资源编码如果不一致如何处理？</p>
</li>
</ul>
<ul>
<li><p>谈一谈你对 ECMAScript6 的了解？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ECMAScript 6 是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</div><div class="line">标准的制定者有计划，以后每年发布一次标准，使用年份作为标准的版本。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。也就是说，ES6就是ES2015</div></pre></td></tr></table></figure>
</li>
<li><p>ECMAScript 6 怎么写 class ，为何会出现 class？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</div><div class="line">//定义类</div><div class="line">class Point &#123;</div><div class="line">    constructor(x,y) &#123;  //构造方法</div><div class="line">        this.x = x;  //this关键字代表实例对象</div><div class="line">        this.y = y;</div><div class="line">    &#125;</div><div class="line">    toString() &#123;</div><div class="line">        return &apos;(&apos; + this.x + &apos;,&apos; + this.y + &apos;)&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>异步加载 JS 的方式有哪些？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1)defer，只支持 IE</div><div class="line">(2)async:</div><div class="line">(3)创建 script，插入到 DOM 中，加载完毕后 callBack</div></pre></td></tr></table></figure>
</li>
<li><p>document.write 和 innerHTML 有何区别？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.write 只能重绘整个页面</div><div class="line">innerHTML 可以重绘页面的一部分</div></pre></td></tr></table></figure>
</li>
<li><p>DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(1)创建新节点</div><div class="line">  createDocumentFragment()    //创建一个DOM片段</div><div class="line">  createElement()   //创建一个具体的元素</div><div class="line">  createTextNode()   //创建一个文本节点</div><div class="line">(2)添加、移除、替换、插入</div><div class="line">  appendChild()</div><div class="line">  removeChild()</div><div class="line">  replaceChild()</div><div class="line">  insertBefore() //在已有的子节点前插入一个新的子节点</div><div class="line">(3)查找</div><div class="line">  getElementsByTagName()    //通过标签名称</div><div class="line">  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</div><div class="line">  getElementById()    //通过元素Id，唯一性</div></pre></td></tr></table></figure>
</li>
<li><p>数组和对象有哪些原生方法？能否列举一下？</p>
</li>
</ul>
<ul>
<li>如何编写高性能 JavaScript ？<br>详细文章：<a href="http://developer.51cto.com/art/200906/131335.htm" target="_blank" rel="external">浅谈编写高性能的Javascript代码</a></li>
</ul>
<ul>
<li><p>哪些操作会造成内存泄漏？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">内存泄漏是指任何对象在您不再拥有或需要它之后任然存在。</div><div class="line">垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量，如果一个对象的引用数量为0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</div><div class="line">//</div><div class="line">setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</div><div class="line">闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</div></pre></td></tr></table></figure>
</li>
<li><p>是否看过 jQuery 的源码？能否简单概括一下它的实现原理？</p>
</li>
</ul>
<ul>
<li>jQuery.fn 的 init 方法返回的 this 指的是什么对象？为什么要返回 this ？</li>
</ul>
<ul>
<li><p>jQuery 中如何将数组转化为 json 字符串，然后再转化回来？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">jQuery 中没有提供这个功能，所以需要先编写两个 jQuery 的扩展：</div><div class="line">$.fn.stringifyArray = function(array) &#123;</div><div class="line">    return JSON.stringify(array)</div><div class="line">&#125;</div><div class="line">$.fn.parseArray = function(array) &#123;</div><div class="line">    return JSON.parse(array)</div><div class="line">&#125;</div><div class="line">//</div><div class="line">然后调用:</div><div class="line">$(&quot;&quot;).stringifyArray(array)</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery 的属性拷贝（extend）的实现原理是什么？如何实现深拷贝？</p>
</li>
</ul>
<ul>
<li>jQuery.extend 与 jQuery.fn.extend 有何区别？</li>
</ul>
<ul>
<li>jQuery 的队列是如何实现的？队列可以用在哪些地方？</li>
</ul>
<ul>
<li>jQuery 中一个对象可以同时绑定多个事件，这是如何实现的？</li>
</ul>
<ul>
<li><p>是否了解针对 jQuery 性能的优化方法？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</div><div class="line">//</div><div class="line">频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。</div><div class="line"> 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);</div><div class="line"> //</div><div class="line">for (var i = size; i &lt; arr.length; i++) &#123;&#125;</div><div class="line">for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：</div><div class="line">for (var i = size, length = arr.length; i &lt; length; i++) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery 与 jQuery UI 有何区别？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`jQuery`是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</div><div class="line">`jQuery UI`则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</div></pre></td></tr></table></figure>
</li>
<li><p>jQuery UI 如何自定义组件？</p>
</li>
</ul>
<ul>
<li><p>如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过判断 Global 对象是否为 window ，如果不为 window ，当前脚本没有运行在浏览器中</div></pre></td></tr></table></figure>
</li>
<li><p>什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？</p>
</li>
</ul>
<ul>
<li><p>怎样用js实现千位分隔符？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">正则 + replace</div><div class="line">function commafy(num) &#123;</div><div class="line">    num = num + &apos;&apos;;</div><div class="line">    var reg = /(-?d+)(d&#123;3&#125;)/;</div><div class="line">    if (reg.test(num)) &#123;</div><div class="line">        num = num.replace(reg, &apos;$1,$2&apos;);</div><div class="line">    &#125;</div><div class="line">    return num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>检测浏览器版本有哪些方式？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">功能检测、userAgent 特征检测</div><div class="line">比如：navigator.userAgent</div><div class="line">//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>谈谈你对 JavaScript 中的模块规范 CommonJS、AMD、CMD 的了解？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//个人拙见</div><div class="line">|   CommonJS   |   AMD   |   CMD   |</div><div class="line">|--------------|---------|---------|</div><div class="line">|    Node.js   |RequireJS|  SeaJS  |</div></pre></td></tr></table></figure>
</li>
</ul>
<p>详细文章：<a href="http://www.2cto.com/kf/201411/348276.html" target="_blank" rel="external">浅析JS中的模块规范（CommonJS，AMD，CMD）</a>、<a href="http://my.oschina.net/felumanman/blog/263330?p=1" target="_blank" rel="external">关于 CommonJS AMD CMD UMD</a></p>
<ul>
<li>前端 MVC、MVVM<br>1、MVC<br><img src="http://upload-images.jianshu.io/upload_images/1714316-f5f3378c71fa8a2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVC"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">模型（Model）：数据保存</div><div class="line">视图（View）：用户界面</div><div class="line">控制器（Controller）：业务逻辑</div><div class="line">(1)View 传送指令到 Controller</div><div class="line">(2)Controller 完成业务逻辑后，要求 Model 改变状态</div><div class="line">(3)Model 将新的数据发送到 View ，用户得到反馈</div><div class="line">所有通信都是单向的。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2、MVVM<br><img src="http://upload-images.jianshu.io/upload_images/1714316-235c293d0a018e28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVVM"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">模型（Model）</div><div class="line">视图（View）</div><div class="line">视图模型（ViewModel）</div><div class="line">(1)各部分间都是双向通信</div><div class="line">(2)View 与 Model 不发生联系，都通过 ViewModel 传递</div><div class="line">(3)View 非常薄，不部署任何业务逻辑，称为“被动视图”（Passive View），即没有任何主动性；而 ViewModel 非常厚，所有逻辑都部署在那里</div><div class="line">采用双向绑定（data-binding）：View 的变动，自动反映在 ViewModel ，反之亦然。</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt; 原作者晓松链接 &lt;a href=&quot;http://www.jianshu.com/p/05d84b60a1dc&quot;&gt;http://www.jianshu.com/p/05d84b60a1dc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1714316-71dd9f7c05c24792.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“每18至24个月，前端都会难一倍”&lt;/p&gt;
&lt;p&gt;——赫门 “2015深JS大会《前端服务化之路》主题演讲”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h4&gt;&lt;p&gt;&lt;code&gt;数据类型&lt;/code&gt;、&lt;code&gt;运算&lt;/code&gt;、&lt;code&gt;对象&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;、&lt;code&gt;继承&lt;/code&gt;、&lt;code&gt;闭包&lt;/code&gt;、&lt;code&gt;作用域&lt;/code&gt;、&lt;code&gt;原型链&lt;/code&gt;、&lt;code&gt;事件&lt;/code&gt;、&lt;code&gt;RegExp&lt;/code&gt;、&lt;code&gt;JSON&lt;/code&gt;、&lt;code&gt;Ajax&lt;/code&gt;、&lt;code&gt;DOM&lt;/code&gt;、&lt;code&gt;BOM&lt;/code&gt;、&lt;code&gt;内存泄漏&lt;/code&gt;、&lt;code&gt;跨域&lt;/code&gt;、&lt;code&gt;异步加载&lt;/code&gt;、&lt;code&gt;模板引擎&lt;/code&gt;、&lt;code&gt;前端MVC&lt;/code&gt;、&lt;code&gt;前端MVVM&lt;/code&gt;、&lt;code&gt;路由&lt;/code&gt;、&lt;code&gt;模块化&lt;/code&gt;、&lt;code&gt;Canvas&lt;/code&gt;、&lt;code&gt;jQuery&lt;/code&gt;、&lt;code&gt;ECMAScript 2015（ES6）&lt;/code&gt;、&lt;code&gt;Node.js&lt;/code&gt;、&lt;code&gt;AngularJS&lt;/code&gt;、&lt;code&gt;React&lt;/code&gt;、&lt;code&gt;CommonJS&lt;/code&gt;、&lt;code&gt;AMD&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt; ……&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://leehave.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="面试技巧" scheme="https://leehave.github.io/tags/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>es6中文手册</title>
    <link href="https://leehave.github.io/2016/08/02/es6%E6%89%8B%E5%86%8C/"/>
    <id>https://leehave.github.io/2016/08/02/es6手册/</id>
    <published>2016-08-02T09:24:17.000Z</published>
    <updated>2016-08-02T09:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个 ES2015(ES6) 的Cheatsheet，其中包括提示、小技巧、最佳实践和一些代码片段，帮助你<br>完成日复一日的开发工作。</p>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#var-versus-let--const">var 与 let / const 声明</a></li>
<li><a href="#replacing-iifes-with-blocks">代码执行块替换立即执行函数</a></li>
<li><a href="#arrow-functions">箭头函数</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#destructuring">解构</a></li>
<li><a href="#modules">模块</a></li>
<li><a href="#parameters">参数</a></li>
<li><a href="#classes">类</a></li>
<li><a href="#symbols">Symbols</a></li>
<li><a href="#maps">Maps</a></li>
<li><a href="#weakmaps">WeakMaps</a></li>
<li><a href="#promises">Promises</a></li>
<li><a href="#generators">Generators</a></li>
<li><a href="#async-await">Async Await</a><a id="more"></a>
<h2 id="var-versus-let-const"><a href="#var-versus-let-const" class="headerlink" title="var versus let / const"></a>var versus let / const</h2></li>
</ul>
<blockquote>
<p>除了 <code>var</code> 以外，我们现在多了两个新的标识符来声明变量的存储，它们就是 <code>let</code> 和 <code>const</code>。<br>不同于 <code>var</code> ，<code>let</code> 和 <code>const</code> 语句不会造成声明提升。</p>
</blockquote>
<p>一个 <code>var</code> 的例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> snack = <span class="string">'Meow Mix'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (food) &#123;</div><div class="line">        <span class="keyword">var</span> snack = <span class="string">'Friskies'</span>;</div><div class="line">        <span class="keyword">return</span> snack;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> snack;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getFood(<span class="literal">false</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>让我们再观察下面语句中，使用 <code>let</code> 替换了 <code>var</code> 后的表现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> snack = <span class="string">'Meow Mix'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFood</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (food) &#123;</div><div class="line">        <span class="keyword">let</span> snack = <span class="string">'Friskies'</span>;</div><div class="line">        <span class="keyword">return</span> snack;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> snack;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getFood(<span class="literal">false</span>); <span class="comment">// 'Meow Mix'</span></div></pre></td></tr></table></figure>
<p>当我们重构使用 <code>var</code> 的老代码时，一定要注意这种变化。盲目使用 <code>let</code> 替换 <code>var</code> 后可能会导致预期意外的结果。</p>
<blockquote>
<p><strong>注意</strong>：<code>let</code> 和 <code>const</code> 是块级作用域语句。所以在语句块以外引用这些变量时，会造成引用错误 <code>ReferenceError</code>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line"></div><div class="line"><span class="keyword">let</span> x = <span class="string">'hi'</span>; <span class="comment">// ReferenceError: x is not defined</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>: 在重构老代码时，<code>var</code> 声明需要格外的注意。在创建一个新项目时，使用 <code>let</code> 声明一个变量，使用 <code>const</code> 来声明一个不可改变的常量。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Replacing-IIFEs-with-Blocks"><a href="#Replacing-IIFEs-with-Blocks" class="headerlink" title="Replacing IIFEs with Blocks"></a>Replacing IIFEs with Blocks</h2><p>我们以往创建一个 <strong>立即执行函数</strong> 时，一般是在函数最外层包裹一层括号。<br>ES6支持块级作用域（更贴近其他语言），我们现在可以通过创建一个代码块（Block）来实现，不必通过创建一个函数来实现，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> food = <span class="string">'Meow Mix'</span>;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(food); <span class="comment">// Reference Error</span></div></pre></td></tr></table></figure>
<p>使用支持块级作用域的ES6的版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> food = <span class="string">'Meow Mix'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(food); <span class="comment">// Reference Error</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h2><p>一些时候，我们在函数嵌套中需要访问上下文中的 <code>this</code>。比如下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character; <span class="comment">// Cannot read property 'name' of undefined</span></div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一种通用的方式是把上下文中的 <code>this</code> 保存在一个变量里：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// Store the context of this</span></div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> that.name + character;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们也可以把 <code>this</code> 通过属性传进去：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character;</div><div class="line">    &#125;, <span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>还可以直接使用 <code>bind</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">character</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + character;</div><div class="line">    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用 <strong>箭头函数</strong>，<code>this</code> 的值不用我们再做如上几段代码的特殊处理，直接使用即可。<br>上面的代码可以重写为下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.prefixName = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.map(character =&gt; <span class="keyword">this</span>.name + character);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：使用箭头函数，再也不用考虑 <code>this</code> 的问题了。</p>
</blockquote>
<p>当我们编写只返回一个表达式值的简单函数时，也可以使用箭头函数，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> squares = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x &#125;); <span class="comment">// Function Expression</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> squares = arr.map(x =&gt; x * x); <span class="comment">// Arrow Function for terser implementation</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：尽可能地多使用 <strong>箭头函数</strong>。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>在ES6中，标准库也被同样增强了，像字符串对象就新增了 <code>.includes()</code> 和 <code>.repeat()</code> 方法。</p>
<h3 id="includes"><a href="#includes" class="headerlink" title=".includes( )"></a>.includes( )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'food'</span>;</div><div class="line"><span class="keyword">var</span> substring = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(string.indexOf(substring) &gt; <span class="number">-1</span>);</div></pre></td></tr></table></figure>
<p>现在，我们可以使用 <code>.inclues()</code> 方法，替代以往判断内容 <code>&gt; -1</code> 的方式。<br><code>.includes()</code> 方法会极简地返回一个布尔值结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> string = <span class="string">'food'</span>;</div><div class="line"><span class="keyword">const</span> substring = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(string.includes(substring)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="repeat"><a href="#repeat" class="headerlink" title=".repeat( )"></a>.repeat( )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">string, count</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> strings = [];</div><div class="line">    <span class="keyword">while</span>(strings.length &lt; count) &#123;</div><div class="line">        strings.push(string);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strings.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ES6中，我们可以使用一个极简的方法来实现重复字符：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String.repeat(numberOfRepetitions)</span></div><div class="line"><span class="string">'meow'</span>.repeat(<span class="number">3</span>); <span class="comment">// 'meowmeowmeow'</span></div></pre></td></tr></table></figure>
<h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>使用 <strong>字符串模板字面量</strong>，我可以在字符串中直接使用特殊字符，而不用转义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">"This string contains \"double quotes\" which are escaped."</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="string">`This string contains "double quotes" which don't need to be escaped anymore.`</span>;</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 还支持直接插入变量，可以实现字符串与变量的直接连接输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Tiger'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">13</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'My cat is named '</span> + name + <span class="string">' and is '</span> + age + <span class="string">' years old.'</span>);</div></pre></td></tr></table></figure>
<p>更简单的版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="string">'Tiger'</span>;</div><div class="line"><span class="keyword">const</span> age = <span class="number">13</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`My cat is named <span class="subst">$&#123;name&#125;</span> and is <span class="subst">$&#123;age&#125;</span> years old.`</span>);</div></pre></td></tr></table></figure>
<p>ES5中，我们要这样生成多行文本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = (</div><div class="line">    <span class="string">'cat\n'</span> +</div><div class="line">    <span class="string">'dog\n'</span> +</div><div class="line">    <span class="string">'nickelodeon'</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = [</div><div class="line">    <span class="string">'cat'</span>,</div><div class="line">    <span class="string">'dog'</span>,</div><div class="line">    <span class="string">'nickelodeon'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 让我们不必特别关注多行字符串中的换行转义符号，直接换行即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = ( <span class="string">`cat</span></div><div class="line">dog</div><div class="line">nickelodeon`</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>字符串模板字面量</strong> 内部可以使用表达式，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">let</span> text = <span class="string">`The time and date is <span class="subst">$&#123;today.toLocaleString()&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h2><p>解构让我们可以使用非常便捷的语法，直接将数组或者对象中的值直接分别导出到多个变量中，</p>
<h3 id="Destructuring-Arrays"><a href="#Destructuring-Arrays" class="headerlink" title="Destructuring Arrays"></a>Destructuring Arrays</h3><p><strong>解构数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> a = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> b = arr[<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> c = arr[<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> d = arr[<span class="number">3</span>];</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="Destructuring-Objects"><a href="#Destructuring-Objects" class="headerlink" title="Destructuring Objects"></a>Destructuring Objects</h3><p><strong>解构对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123; occupation: <span class="string">'jedi'</span>, father: <span class="string">'anakin'</span> &#125;;</div><div class="line"><span class="keyword">var</span> occupation = luke.occupation; <span class="comment">// 'jedi'</span></div><div class="line"><span class="keyword">var</span> father = luke.father; <span class="comment">// 'anakin'</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> luke = &#123; occupation: <span class="string">'jedi'</span>, father: <span class="string">'anakin'</span> &#125;;</div><div class="line"><span class="keyword">let</span> &#123;occupation, father&#125; = luke;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(occupation); <span class="comment">// 'jedi'</span></div><div class="line"><span class="built_in">console</span>.log(father); <span class="comment">// 'anakin'</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>ES6之前，浏览器端的模块化代码，我们使用像<a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>这样的库，<br>在 <strong>Node.js</strong> 中，我们则使用 <a href="https://nodejs.org/api/modules.html#modules_module_require_id" target="_blank" rel="external">require</a>。<br>在ES6中，我们现在可以直接使用AMD 和 CommonJS这些模块了。</p>
<h3 id="Exporting-in-CommonJS"><a href="#Exporting-in-CommonJS" class="headerlink" title="Exporting in CommonJS"></a>Exporting in CommonJS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>;</div><div class="line"><span class="built_in">module</span>.exports = &#123; foo: <span class="string">'bar'</span> &#125;;</div><div class="line"><span class="built_in">module</span>.exports = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h3 id="Exporting-in-ES6"><a href="#Exporting-in-ES6" class="headerlink" title="Exporting in ES6"></a>Exporting in ES6</h3><p>在ES6中，提供了多种设置模块出口的方式，比如我们要导出一个变量，那么使用 <strong>变量名</strong> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'David'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> age  = <span class="number">25</span>;​​</div></pre></td></tr></table></figure>
<p>还可以为对象 <strong>导出一个列表</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; sumTwo, sumThree &#125;;</div></pre></td></tr></table></figure>
<p>我们也可以使用简单的一个 <code>export</code> 关键字来导出一个结果值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们可以 <strong>导出一个默认出口</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumThree</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> api = &#123;</div><div class="line">    sumTwo,</div><div class="line">    sumThree</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：总是在模块的 <strong>最后</strong> 使用 <code>export default</code> 方法。<br>它让模块的出口更清晰明了，节省了阅读整个模块来寻找出口的时间。<br>更多的是，在大量CommonJS模块中，通用的习惯是设置一个出口值或者出口对象。<br>最受这个规则，可以让我们的代码更易读，且更方便的联合使用CommonJS和ES6模块。</p>
</blockquote>
<h3 id="Importing-in-ES6"><a href="#Importing-in-ES6" class="headerlink" title="Importing in ES6"></a>Importing in ES6</h3><p>ES6提供了好几种模块的导入方式。我们可以单独引入一个文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'underscore'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里需要注意的是， <strong>整个文件的引入方式会执行该文件内的最上层代码</strong>。</p>
</blockquote>
<p>就像Python一样，我们还可以命名引用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; sumTwo, sumThree &#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>我们甚至可以使用 <code>as</code> 给这些模块重命名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    sumTwo <span class="keyword">as</span> addTwoNumbers,</div><div class="line">    sumThree <span class="keyword">as</span> sumThreeNumbers</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>另外，我们能 <strong>引入所有的东西（原文：import all the things）</strong> （也称为命名空间引入）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div></pre></td></tr></table></figure>
<p>最后，我们能可以从一个模块的众多值中引入一个列表：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> additionUtil <span class="keyword">from</span> <span class="string">'math/addtion'</span>;</div><div class="line"><span class="keyword">const</span> &#123; sumTwo, sumThree &#125; = additionUtil;</div></pre></td></tr></table></figure>
<p>像这样引用默认对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'math/addition'</span>;</div><div class="line"><span class="comment">// Same as: import &#123; default as api &#125; from 'math/addition';</span></div></pre></td></tr></table></figure>
<p>我们建议一个模块导出的值应该越简洁越好，不过有时候有必要的话命名引用和默认引用可以混着用。如果一个模块是这样导出的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foos.js</span></div><div class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span>, foo1, foo2 &#125;;</div></pre></td></tr></table></figure>
<p>那我们可以如此导入这个模块的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo, &#123; foo1, foo2 &#125; from &apos;foos&apos;;</div></pre></td></tr></table></figure>
<p>我们还可以导入commonjs模块，例如React：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">const</span> &#123; Component, PropTypes &#125; = React;</div></pre></td></tr></table></figure>
<p>更简化版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：被导出的值是被 <strong>绑定的（原文：bingdings）</strong>，而不是引用。<br>所以，改变一个模块中的值的话，会影响其他引用本模块的代码，一定要避免此种改动发生。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>在ES5中，许多种方法来处理函数的 <strong>参数默认值（default values）</strong>，<strong>参数数量（indefinite arguments）</strong>，<strong>参数命名（named parameters）</strong>。<br>ES6中，我们可以使用非常简洁的语法来处理上面提到的集中情况。</p>
<h3 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    x = x || <span class="number">0</span>;</div><div class="line">    y = y || <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6中，我们可以简单为函数参数启用默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">x=0, y=0</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">addTwoNumbers(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 6</span></div><div class="line">addTwoNumbers(<span class="number">2</span>); <span class="comment">// 2</span></div><div class="line">addTwoNumbers(); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<h3 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h3><p>ES5中，遇到参数数量不确定时，我们只能如此处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <strong>rest</strong> 操作符，我们可以给函数传入一个不确定数量的参数列表：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) &#123;</div><div class="line">        <span class="built_in">console</span>.log(arg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Named-Parameters"><a href="#Named-Parameters" class="headerlink" title="Named Parameters"></a>Named Parameters</h3><p>命名函数<br>ES5中，当我们要处理多个 <strong>命名参数</strong> 时，通常会传入一个 <strong>选项对象</strong> 的方式，这种方式被jQuery采用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = options.height || <span class="number">600</span>;</div><div class="line">    <span class="keyword">var</span> width  = options.width  || <span class="number">400</span>;</div><div class="line">    <span class="keyword">var</span> lineStroke = options.lineStroke || <span class="string">'black'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以利用上面提到的新特性 <strong>解构</strong> ，来完成与上面同样功能的函数：<br>We can achieve the same functionality using destructuring as a formal parameter<br>to a function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params"></span></span></div><div class="line">    &#123; height=600, width=400, lineStroke='black'&#125;) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Use variables height, width, lineStroke here</span></div></pre></td></tr></table></figure>
<p>如果我们需要把这个参数变为可选的，那么只要把该参数解构为一个空对象就好了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeCanvas</span>(<span class="params"></span></span></div><div class="line">    &#123; height=600, width=400, lineStroke='black'&#125; = &#123;&#125;) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p>我们可以利用展开操作符（Spread Operator）来把一组数组的值，当作参数传入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(...[<span class="number">-1</span>, <span class="number">100</span>, <span class="number">9001</span>, <span class="number">-32</span>]); <span class="comment">// 9001</span></div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>在ES6以前，我们实现一个类的功能的话，需要首先创建一个构造函数，然后扩展这个函数的原型方法，就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name   = name;</div><div class="line">    <span class="keyword">this</span>.age    = age;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.incrementAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age += <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>继承父类的子类需要这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Personal</span>(<span class="params">name, age, gender, occupation, hobby</span>) </span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>, name, age, gender);</div><div class="line">    <span class="keyword">this</span>.occupation = occupation;</div><div class="line">    <span class="keyword">this</span>.hobby = hobby;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Personal.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line">Personal.prototype.constructor = Personal;</div><div class="line">Personal.prototype.incrementAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Person.prototype.incrementAge.call(<span class="keyword">this</span>) += <span class="number">20</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ES6提供了一些语法糖来实现上面的功能，我们可以直接创建一个类：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age, gender) &#123;</div><div class="line">        <span class="keyword">this</span>.name   = name;</div><div class="line">        <span class="keyword">this</span>.age    = age;</div><div class="line">        <span class="keyword">this</span>.gender = gender;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">      <span class="keyword">this</span>.age += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承父类的子类只要简单的使用 <code>extends</code> 关键字就可以了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Personal</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, age, gender, occupation, hobby) &#123;</div><div class="line">        <span class="keyword">super</span>(name, age, gender);</div><div class="line">        <span class="keyword">this</span>.occupation = occupation;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">        <span class="keyword">super</span>.incrementAge();</div><div class="line">        <span class="keyword">this</span>.age += <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>最佳实践</strong>：ES6新的类语法把我们从晦涩难懂的实现和原型操作中解救出来，这是个非常适合初学者的功能，而且能让我们写出更干净整洁的代码。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><p>符号（Symbols）在ES6版本之前就已经存在了，但现在我们拥有一个公共的接口来直接使用它们。<br>Symbols对象是一旦创建就不可以被更改的（immutable）而且能被用做hash数据类型中的键。</p>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol( )"></a>Symbol( )</h3><p>调用 <code>Symbol()</code> 或者 <code>Symbol(描述文本)</code> 会创建一个唯一的、在全局中不可以访问的符号对象。<br>一个 <code>Symbol()</code> 的应用场景是：在自己的项目中使用第三方代码库，且你需要给他们的对象或者命名空间打补丁代码，又不想改动或升级第三方原有代码的时候。<br>举个例子，如果你想给 <code>React.Component</code> 这个类添加一个 <code>refreshComponent</code> 方法，但又确定不了这个方法会不会在下个版本中加入，你可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> refreshComponent = <span class="built_in">Symbol</span>();</div><div class="line"></div><div class="line">React.Component.prototype[refreshComponent] = () =&gt; &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Symbol-for-key"><a href="#Symbol-for-key" class="headerlink" title="Symbol.for(key)"></a>Symbol.for(key)</h3><p>使用 <code>Symbol.for(key)</code> 也是会创建一个不可改变的Symbol对象，但区别于上面的创建方法，这个对象是在全局中可以被访问到的。<br>调用两次 <code>Symbol.for(key)</code> 会返回相同的Symbol实例。</p>
<p><strong>提示</strong>：这并不同于 <code>Symbol(description)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>一个Symbols常用的使用场景，是需要使用特别 <code>Symbol.for(key)</code> 方法来实现代码间的协作。<br>这能让你在你的代码中，查找包含已知的接口的第三方代码中Symbol成员。（译者：这句话好难翻。。。原文：This can be<br>achieved by having your code look for a Symbol member on object arguments from third parties that contain some known interface. ）举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reader</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> specialRead = <span class="built_in">Symbol</span>.for(<span class="string">'specialRead'</span>);</div><div class="line">    <span class="keyword">if</span> (obj[specialRead]) &#123;</div><div class="line">        <span class="keyword">const</span> reader = obj[specialRead]();</div><div class="line">        <span class="comment">// do something with reader</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'object cannot be read'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在另一个库中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> specialRead = <span class="built_in">Symbol</span>.for(<span class="string">'specialRead'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeReadableType</span> </span>&#123;</div><div class="line">    [specialRead]() &#123;</div><div class="line">        <span class="keyword">const</span> reader = createSomeReaderFrom(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> reader;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：<code>Symbol.iterable</code> 在ES6中像其他可枚举的对象，如数组，字符串，generators一样，当这个方法被调用时会激活一个枚举器并返回一个对象。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p><strong>Maps</strong> 是一个Javascript中很重要（迫切需要）的数据结构。<br>在ES6之前，我们创建一个 <strong>hash</strong> 通常是使用一个对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">map[key1] = <span class="string">'value1'</span>;</div><div class="line">map[key2] = <span class="string">'value2'</span>;</div></pre></td></tr></table></figure>
<p>但是，这样的代码无法避免函数被特别的属性名覆盖的意外情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; getOwnProperty(&#123; hasOwnProperty: <span class="string">'Hah, overwritten'</span>&#125;, <span class="string">'Pwned'</span>);</div><div class="line">&gt; <span class="built_in">TypeError</span>: Property <span class="string">'hasOwnProperty'</span> is not a <span class="function"><span class="keyword">function</span></span></div></pre></td></tr></table></figure>
<p><strong>Maps</strong> 让我们使用 <code>set</code>，<code>get</code> 和 <code>search</code> 操作数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">&gt; map.set(<span class="string">'name'</span>, <span class="string">'david'</span>);</div><div class="line">&gt; map.get(<span class="string">'name'</span>); <span class="comment">// david</span></div><div class="line">&gt; map.has(<span class="string">'name'</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>Maps最强大的地方在于我们不必只能使用字符串来做key了，现在可以使用任何类型来当作key，而且key不会被强制类型转换为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'name'</span>, <span class="string">'david'</span>],</div><div class="line">    [<span class="literal">true</span>, <span class="string">'false'</span>],</div><div class="line">    [<span class="number">1</span>, <span class="string">'one'</span>],</div><div class="line">    [&#123;&#125;, <span class="string">'object'</span>],</div><div class="line">    [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="string">'function'</span>]</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> key);</div><div class="line">    <span class="comment">// &gt; string, boolean, number, object, function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：当使用 <code>map.get()</code> 判断值是否相等时，非基础类型比如一个函数或者对象，将不会正常工作。<br>有鉴于此，还是建议使用字符串，布尔和数字类型的数据类型。</p>
</blockquote>
<p>我们还可以使用 <code>.entries()</code> 方法来遍历整个map对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="WeakMaps"><a href="#WeakMaps" class="headerlink" title="WeakMaps"></a>WeakMaps</h2><p>在ES5之前的版本，我们为了存储私有数据，有好几种方法。像使用这种下划线命名约定：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(age) &#123;</div><div class="line">        <span class="keyword">this</span>._age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _incrementAge() &#123;</div><div class="line">        <span class="keyword">this</span>._age += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个开源项目中，命名规则很难维持得一直很好，这样经常会造成一些困扰。<br>此时，我们可以选择使用WeakMaps来替代Maps来存储我们的数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> _age = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(age) &#123;</div><div class="line">        _age.set(<span class="keyword">this</span>, age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    incrementAge() &#123;</div><div class="line">        <span class="keyword">let</span> age = _age.get(<span class="keyword">this</span>) + <span class="number">1</span>;</div><div class="line">        _age.set(<span class="keyword">this</span>, age);</div><div class="line">        <span class="keyword">if</span> (age &gt; <span class="number">50</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Midlife crisis'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用WeakMaps来保存我们私有数据的理由之一是不会暴露出属性名，就像下面的例子中的 <code>Reflect.ownKeys()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="number">50</span>);</div><div class="line">&gt; person.incrementAge(); <span class="comment">// 'Midlife crisis'</span></div><div class="line">&gt; <span class="built_in">Reflect</span>.ownKeys(person); <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>一个使用WeakMaps存储数据更实际的例子，就是有关于一个DOM元素和对该DOM元素（有污染）地操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="keyword">let</span> el  = <span class="built_in">document</span>.getElementById(<span class="string">'someElement'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Store a weak reference to the element with a key</span></div><div class="line">map.set(el, <span class="string">'reference'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Access the value of the element</span></div><div class="line"><span class="keyword">let</span> value = map.get(el); <span class="comment">// 'reference'</span></div><div class="line"></div><div class="line"><span class="comment">// Remove the reference</span></div><div class="line">el.parentNode.removeChild(el);</div><div class="line">el = <span class="literal">null</span>;</div><div class="line"></div><div class="line">value = map.get(el); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>上面的例子中，一个对象被垃圾回收期给销毁了，WeakMaps会自动的把自己内部所对应的键值对数据同时销毁。</p>
<blockquote>
<p><strong>提示</strong>：结合这个例子，再考虑下jQuery是如何实现缓存带有引用的DOM元素这个功能的，使用了WeakMaps的话，当被缓存的DOM元素被移除的时，jQuery可以自动释放相应元素的内存。<br>通常情况下，在涉及DOM元素存储和缓存的情况下，使用WeakMaps是非常适合的。</p>
</blockquote>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>Promises让我们让我们多缩进难看的代码（回调地狱）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">func1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</div><div class="line">    func2(value1, <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</div><div class="line">        func3(value2, <span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</div><div class="line">            func4(value3, <span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</div><div class="line">                func5(value4, <span class="function"><span class="keyword">function</span> (<span class="params">value5</span>) </span>&#123;</div><div class="line">                    <span class="comment">// Do something with value 5</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>写成这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func1(value1)</div><div class="line">    .then(func2)</div><div class="line">    .then(func3)</div><div class="line">    .then(func4)</div><div class="line">    .then(func5, value5 =&gt; &#123;</div><div class="line">        <span class="comment">// Do something with value 5</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>在ES6之前，我们使用<a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a> 或者<br><a href="https://github.com/kriskowal/q" target="_blank" rel="external">Q</a>。现在我们有了原生版本的 Promises：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt;</div><div class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Failed to fulfill Promise'</span>)))</div><div class="line">        .catch(reason =&gt; <span class="built_in">console</span>.log(reason));</div></pre></td></tr></table></figure>
<p>这里有两个处理函数，<strong>resolve</strong>（当Promise执行成功完毕时调用的回调函数） 和 <strong>reject</strong> （当Promise执行不接受时调用的回调函数）</p>
<blockquote>
<p><strong>Promises的好处</strong>：大量嵌套错误回调函数会使代码变得难以阅读理解。<br>使用了Promises，我们可以让我们代码变得更易读，组织起来更合理。<br>此外，Promise处理后的值，无论是解决还是拒绝的结果值，都是不可改变的。</p>
</blockquote>
<p>下面是一些使用Promises的实际例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fetchJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">        $.getJSON(url)</div><div class="line">            .done((json) =&gt; resolve(json))</div><div class="line">            .fail((xhr, status, err) =&gt; reject(status + err.message));</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们还可以使用 <code>Promise.all()</code> 来异步的 <strong>并行</strong> 处理一个数组的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> urls = [</div><div class="line">    <span class="string">'http://www.api.com/items/1234'</span>,</div><div class="line">    <span class="string">'http://www.api.com/items/4567'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> urlPromises = urls.map(fetchJSON);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all(urlPromises)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">        results.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed: '</span>, err);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>就像<a href="https://github.com/DrkSephy/es6-cheatsheet#promises" target="_blank" rel="external">Promises</a>如何让我们避免<a href="http://callbackhell.com/" target="_blank" rel="external">回调地狱</a>一样，Generators也可以使我们的代码扁平化，同时给予我们开发者像开发同步代码一样的感觉来写异步代码。Generators本质上是一种支持的函数，随后返回表达式的值。<br>Generators实际上是支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield" target="_blank" rel="external">暂停运行</a>，随后根据上一步的返回值再继续运行的一种函数。</p>
<p>下面代码是一个使用generators函数的简单例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sillyGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> generator = sillyGenerator();</div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line">&gt; <span class="built_in">console</span>.log(generator.next()); <span class="comment">// &#123; value: 4, done: false &#125;</span></div></pre></td></tr></table></figure>
<p>就像上面的例子，当<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next" target="_blank" rel="external">next</a>运行时，它会把我们的generator向前“推动”，同时执行新的表达式。<br>我们能利用Generators来像书写同步代码一样书写异步代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Hiding asynchronousity with Generators</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    getJSON(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        generator.next(response);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们写个generator函数将要返回我们的数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</div><div class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</div><div class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</div><div class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>借助于 <code>yield</code>，我们可以保证 <code>entry1</code> 确实拿到数据并转换后再赋值给 <code>data1</code>。</p>
<p>当我们使用generators来像书写同步代码一样书写我们的异步代码逻辑时，没有一种清晰简单的方式来处理期间可能会产生的错误或者异常。在这种情况下，我们可以在我们的generator中引入Promises来处理，就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</div><div class="line">        getJSON(url, resolve);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再写一个函数，其中使用 <code>next</code> 来步进我们的generator的同事，再利用我们上面的 <code>request</code> 方法来产生（yield）一个Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterateGenerator</span>(<span class="params">gen</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> generator = gen();</div><div class="line">    <span class="keyword">var</span> ret;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">iterate</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        ret = generator.next();</div><div class="line">        <span class="keyword">if</span>(!ret.done) &#123;</div><div class="line">            ret.value.then(iterate);</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Generator中引入了Promises后，我们就可以通过Promise的 <code>.catch</code> 和 <code>reject</code> 来捕捉和处理错误了。<br>使用了我们新版的Generator后，新版的调用就像老版本一样简单可读（译者注：有微调）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iterateGenerator(<span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> entry1 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item1'</span>);</div><div class="line">    <span class="keyword">var</span> data1  = <span class="built_in">JSON</span>.parse(entry1);</div><div class="line">    <span class="keyword">var</span> entry2 = <span class="keyword">yield</span> request(<span class="string">'http://some_api/item2'</span>);</div><div class="line">    <span class="keyword">var</span> data2  = <span class="built_in">JSON</span>.parse(entry2);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在使用Generator后，我们可以重用我们的老版本代码实现，以此展示了Generator的力量。<br>当使用Generators和Promises后，我们可以像书写同步代码一样书写异步代码的同时优雅地解决了错误处理问题。<br>此后，我们实际上可以开始利用更简单的一种方式了，它就是<a href="https://github.com/DrkSephy/es6-cheatsheet#async-await" target="_blank" rel="external">async-await</a>。</p>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async Await"></a>Async Await</h2><p><code>async await</code> 随着ES2016版本就要发布了，它给我们提供了一种更轻松的、更简单的可以替代的实现上面 Generators 配合 Promises 组合代码的一种编码方式，让我们来看看例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    request(url, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">      resolve(body);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> getJSON();</div><div class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// NOT undefined!</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">main();</div></pre></td></tr></table></figure>
<p>它们看上去和Generators很像。我（作者）强烈推荐使用 <code>async await</code> 来替代Generators + Promises的写法。<br><a href="http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html" target="_blank" rel="external">这里</a>是个很好的学习资源，让我们学习和使用这项ES7中的新功能。</p>
<p><sup><a href="#table-of-contents">(回到目录)</a></sup></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个 ES2015(ES6) 的Cheatsheet，其中包括提示、小技巧、最佳实践和一些代码片段，帮助你&lt;br&gt;完成日复一日的开发工作。&lt;/p&gt;
&lt;h2 id=&quot;Table-of-Contents&quot;&gt;&lt;a href=&quot;#Table-of-Contents&quot; class=&quot;headerlink&quot; title=&quot;Table of Contents&quot;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#var-versus-let--const&quot;&gt;var 与 let / const 声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#replacing-iifes-with-blocks&quot;&gt;代码执行块替换立即执行函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arrow-functions&quot;&gt;箭头函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#strings&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#destructuring&quot;&gt;解构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modules&quot;&gt;模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#parameters&quot;&gt;参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#classes&quot;&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#symbols&quot;&gt;Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maps&quot;&gt;Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#weakmaps&quot;&gt;WeakMaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#generators&quot;&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#async-await&quot;&gt;Async Await&lt;/a&gt;
    
    </summary>
    
    
      <category term="ECMAscript" scheme="https://leehave.github.io/tags/ECMAscript/"/>
    
  </entry>
  
  <entry>
    <title>导演很无语</title>
    <link href="https://leehave.github.io/2016/08/01/something/"/>
    <id>https://leehave.github.io/2016/08/01/something/</id>
    <published>2016-07-31T16:03:29.000Z</published>
    <updated>2016-07-31T16:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好"><a href="#有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好" class="headerlink" title="有点蛋疼的是,换了工作后,博客源文件忘了拷走,现在重新搭建了一遍,好在是用 ‘nodejs’ 强力驱动,hexo的博客驱动还是很给力的,我这种懒人,弄了个WordPress到现在还没设计好怎么搞好,"></a>有点蛋疼的是,换了工作后,博客源文件忘了拷走,现在重新搭建了一遍,好在是用 ‘nodejs’ 强力驱动,hexo的博客驱动还是很给力的,我这种懒人,弄了个WordPress到现在还没设计好怎么搞好,</h2><p>最近发生了好多事,措手不及也是意料之中。————————————————————————分割线</p>
<blockquote>
<p>最近在学各种js框架和夯实基础(走的时候茶杯水漏了把犀牛书弄湿了,心塞–),在这分享点资源<br>awesome前端库(<a href="https://www.awesomes.cn/" target="_blank" rel="external">https://www.awesomes.cn/</a>) 醉牛前端(<a href="http://f2er.club/" target="_blank" rel="external">http://f2er.club/</a>) talkingcoder(<a href="http://www.talkingcoder.com/" target="_blank" rel="external">http://www.talkingcoder.com/</a>)</p>
</blockquote>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><ul>
<li><p><strong>构建 Facebook F8 2016 App / React Native 开发指南</strong><br><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">http://f8-app.liaohuqiu.net/</a></p>
</li>
<li><p><strong>React-Native入门指南</strong><br><a href="https://github.com/vczero/react-native-lesson" target="_blank" rel="external">https://github.com/vczero/react-native-lesson</a></p>
</li>
<li><p><strong>30天学习React Native教程</strong><br><a href="https://github.com/fangwei716/30-days-of-react-native" target="_blank" rel="external">https://github.com/fangwei716/30-days-of-react-native</a></p>
</li>
<li><p><strong>React-Native视频教程(部分免费)</strong><br><a href="https://egghead.io/technologies/react" target="_blank" rel="external">https://egghead.io/technologies/react</a></p>
</li>
</ul>
<h3 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h3><ul>
<li><p><strong>angular2</strong><br><a href="https://angular.cn/" target="_blank" rel="external">https://angular.cn/</a></p>
</li>
<li><p><strong>使用typescript撰写的angularjs风格app</strong><br><a href="https://github.com/NoctisHsu/91APP-TypeScript-Angularjs" target="_blank" rel="external">https://github.com/NoctisHsu/91APP-TypeScript-Angularjs</a></p>
</li>
</ul>
<h3 id="Vuejs"><a href="#Vuejs" class="headerlink" title="Vuejs"></a>Vuejs</h3><ul>
<li><p><strong>基于vue.js重写Cnodejs.org社区的webapp</strong><br><a href="https://github.com/shinygang/Vue-cnodejs" target="_blank" rel="external">https://github.com/shinygang/Vue-cnodejs</a></p>
</li>
<li><p>**基于 Vue.js 的移动端组件库Mint Ui<br><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="external">http://mint-ui.github.io/#!/zh-cn</a></p>
</li>
</ul>
<h3 id="这个不得不说一个-国产的vuer们称作kpi项目的-阿里巴巴的weex"><a href="#这个不得不说一个-国产的vuer们称作kpi项目的-阿里巴巴的weex" class="headerlink" title="这个不得不说一个 国产的vuer们称作kpi项目的 阿里巴巴的weex"></a>这个不得不说一个 国产的vuer们称作kpi项目的 阿里巴巴的weex</h3><p><a href="http://alibaba.github.io/weex/doc/tutorial.html" target="_blank" rel="external">http://alibaba.github.io/weex/doc/tutorial.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有点蛋疼的是-换了工作后-博客源文件忘了拷走-现在重新搭建了一遍-好在是用-‘nodejs’-强力驱动-hexo的博客驱动还是很给力的-我这种懒人-弄了个WordPress到现在还没设计好怎么搞好&quot;&gt;&lt;a href=&quot;#有点蛋疼的是-换了工作后-博客源文件忘了拷走
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack 中文指南</title>
    <link href="https://leehave.github.io/2016/07/31/webpack/"/>
    <id>https://leehave.github.io/2016/07/31/webpack/</id>
    <published>2016-07-31T15:32:37.000Z</published>
    <updated>2016-07-31T15:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitter.im/zhaoda/webpack-handbook?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="external"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/zhaoda/webpack-handbook"></a></p>
<p><a href="https://github.com/webpack/webpack" target="_blank" rel="external">Webpack</a> 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p>
<p><a href="http://zhaoda.net/webpack-handbook" target="_blank" rel="external">主站</a> · <a href="https://www.gitbook.com/book/zhaoda/webpack/details" target="_blank" rel="external">下载电子版</a> · <a href="http://webpackdoc.com" target="_blank" rel="external">国内镜像1</a>（掘金）· <a href="http://wiki.jikexueyuan.com/project/webpack-handbook" target="_blank" rel="external">国内镜像2</a>（极客学院）</p>
<a id="more"></a>
<h2 id="贡献内容"><a href="#贡献内容" class="headerlink" title="贡献内容"></a>贡献内容</h2><p>如果你想参与这本书的共同创作，修改或添加内容，可以先 <a href="https://github.com/zhaoda/webpack-handbook" target="_blank" rel="external">Fork</a> 这本书的仓库，然后将修改的内容提交 <a href="https://github.com/zhaoda/webpack-handbook/pulls" target="_blank" rel="external">Pull requests</a> ；或者创建 <a href="https://github.com/zhaoda/webpack-handbook/issues" target="_blank" rel="external">Issues</a>。</p>
<p>Fork 后的仓库如何同步本仓库？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 添加 upstream 源，只需执行一次</div><div class="line">$ git remote add upstream git@github.com:zhaoda/webpack-handbook.git</div><div class="line"></div><div class="line">// 拉取远程代码</div><div class="line">$ git pull upstream master</div><div class="line"></div><div class="line">// 提交修改</div><div class="line">$ git add .</div><div class="line">$ git commit</div><div class="line"></div><div class="line">// 更新 fork 仓库</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>更多参考： <a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">Syncing a fork</a></p>
<p>注意，本书内容在 <code>/content</code> 目录中， <a href="https://github.com/zhaoda/webpack-handbook/tree/gh-pages" target="_blank" rel="external">gh-pages</a> 分支和 <a href="https://github.com/zhaoda/webpack-handbook/wiki" target="_blank" rel="external">Wiki</a> 版是通过脚本自动生成的。</p>
<h2 id="生成电子书"><a href="#生成电子书" class="headerlink" title="生成电子书"></a>生成电子书</h2><p>这本书使用 <a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">Gitbook</a> 撰写并生成<a href="http://zhaoda.net/webpack-handbook/" target="_blank" rel="external">网站</a>，请查看 <code>package.json</code> 中的 <code>scripts</code> 配置和 <code>/scripts</code> 目录中的脚本来了解这本书的构建和发布过程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 初始化 nodejs 依赖</div><div class="line">$ npm install</div><div class="line"></div><div class="line">// 安装 gitbook 插件</div><div class="line">$ npm install gitbook-cli -g</div><div class="line">$ gitbook install ./content</div><div class="line"></div><div class="line">// 启动 gitbook 服务开始撰写工作</div><div class="line">$ npm run serve-gitbook</div><div class="line"></div><div class="line">// 生成 gitbook</div><div class="line">$ npm run generate-gitbook</div><div class="line"></div><div class="line">// 生成 wiki</div><div class="line">$ npm run generate-wiki</div><div class="line"></div><div class="line">// 发布到 gh-pages 分支</div><div class="line">$ npm run deploy-gitbook</div><div class="line"></div><div class="line">// 发布到 wiki</div><div class="line">$ npm run deploy-wiki</div><div class="line"></div><div class="line">// 生成并发布，是上面4条命令的快捷方式，通常编辑内容后只需要进行这个操作</div><div class="line">$ npm run generate-and-deploy</div></pre></td></tr></table></figure>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p><a href="https://github.com/zhaoda/webpack-handbook/commits/master" target="_blank" rel="external">https://github.com/zhaoda/webpack-handbook/commits/master</a></p>
<h2 id="版权许可"><a href="#版权许可" class="headerlink" title="版权许可"></a>版权许可</h2><p><br>  <span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">Webpack 中文指南</span> 由 <a xmlns:cc="http://creativecommons.org/ns#" href="http://zhaoda.net/webpack-handbook" property="cc:attributionName" rel="external" target="_blank">赵达</a> 创作，采用 <a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享 署名-非商业性使用 4.0 国际 许可协议</a>进行许可。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gitter.im/zhaoda/webpack-handbook?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Join the chat at https://gitter.im/zhaoda/webpack-handbook&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;Webpack&lt;/a&gt; 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 &lt;code&gt;loader&lt;/code&gt; 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zhaoda.net/webpack-handbook&quot;&gt;主站&lt;/a&gt; · &lt;a href=&quot;https://www.gitbook.com/book/zhaoda/webpack/details&quot;&gt;下载电子版&lt;/a&gt; · &lt;a href=&quot;http://webpackdoc.com&quot;&gt;国内镜像1&lt;/a&gt;（掘金）· &lt;a href=&quot;http://wiki.jikexueyuan.com/project/webpack-handbook&quot;&gt;国内镜像2&lt;/a&gt;（极客学院）&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://leehave.github.io/tags/webpack/"/>
    
      <category term="前端打包工具" scheme="https://leehave.github.io/tags/%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="模块化" scheme="https://leehave.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
